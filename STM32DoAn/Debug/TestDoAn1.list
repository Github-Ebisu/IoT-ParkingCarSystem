
TestDoAn1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005814  08005814  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800581c  0800581c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08005824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000040  08005864  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005864  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011391  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000245a  00000000  00000000  00031444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  000338a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5d  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178fb  00000000  00000000  000356ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001472d  00000000  00000000  0004cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093881  00000000  00000000  00061715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004864  00000000  00000000  000f4f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f97fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800571c 	.word	0x0800571c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	0800571c 	.word	0x0800571c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000502:	b2db      	uxtb	r3, r3
 8000504:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2110      	movs	r1, #16
 800050a:	480d      	ldr	r0, [pc, #52]	; (8000540 <Write_MFRC522+0x58>)
 800050c:	f001 fdb2 	bl	8002074 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000510:	f107 010f 	add.w	r1, r7, #15
 8000514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000518:	2201      	movs	r2, #1
 800051a:	480a      	ldr	r0, [pc, #40]	; (8000544 <Write_MFRC522+0x5c>)
 800051c:	f002 fef1 	bl	8003302 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8000520:	1db9      	adds	r1, r7, #6
 8000522:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000526:	2201      	movs	r2, #1
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <Write_MFRC522+0x5c>)
 800052a:	f002 feea 	bl	8003302 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <Write_MFRC522+0x58>)
 8000534:	f001 fd9e 	bl	8002074 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020000 	.word	0x40020000
 8000544:	200000fc 	.word	0x200000fc

08000548 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	b25b      	sxtb	r3, r3
 8000558:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800055c:	b25b      	sxtb	r3, r3
 800055e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000562:	b25b      	sxtb	r3, r3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <Read_MFRC522+0x60>)
 800056e:	f001 fd81 	bl	8002074 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000572:	f107 010e 	add.w	r1, r7, #14
 8000576:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800057a:	2201      	movs	r2, #1
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <Read_MFRC522+0x64>)
 800057e:	f002 fec0 	bl	8003302 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8000582:	f107 010f 	add.w	r1, r7, #15
 8000586:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800058a:	2201      	movs	r2, #1
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <Read_MFRC522+0x64>)
 800058e:	f002 fff4 	bl	800357a <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <Read_MFRC522+0x60>)
 8000598:	f001 fd6c 	bl	8002074 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000
 80005ac:	200000fc 	.word	0x200000fc

080005b0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	460a      	mov	r2, r1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	4613      	mov	r3, r2
 80005be:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffc0 	bl	8000548 <Read_MFRC522>
 80005c8:	4603      	mov	r3, r0
 80005ca:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff85 	bl	80004e8 <Write_MFRC522>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4603      	mov	r3, r0
 80005ee:	460a      	mov	r2, r1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	4613      	mov	r3, r2
 80005f4:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffa5 	bl	8000548 <Read_MFRC522>
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000602:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000606:	43db      	mvns	r3, r3
 8000608:	b25a      	sxtb	r2, r3
 800060a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060e:	4013      	ands	r3, r2
 8000610:	b25b      	sxtb	r3, r3
 8000612:	b2da      	uxtb	r2, r3
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff65 	bl	80004e8 <Write_MFRC522>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800062a:	2103      	movs	r1, #3
 800062c:	2014      	movs	r0, #20
 800062e:	f7ff ffbf 	bl	80005b0 <SetBitMask>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}

08000636 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800063a:	210f      	movs	r1, #15
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff53 	bl	80004e8 <Write_MFRC522>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}

08000646 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 800064a:	f7ff fff4 	bl	8000636 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	202a      	movs	r0, #42	; 0x2a
 8000652:	f7ff ff49 	bl	80004e8 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8000656:	21a9      	movs	r1, #169	; 0xa9
 8000658:	202b      	movs	r0, #43	; 0x2b
 800065a:	f7ff ff45 	bl	80004e8 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800065e:	2103      	movs	r1, #3
 8000660:	202d      	movs	r0, #45	; 0x2d
 8000662:	f7ff ff41 	bl	80004e8 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8000666:	21e8      	movs	r1, #232	; 0xe8
 8000668:	202c      	movs	r0, #44	; 0x2c
 800066a:	f7ff ff3d 	bl	80004e8 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	2015      	movs	r0, #21
 8000672:	f7ff ff39 	bl	80004e8 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8000676:	213d      	movs	r1, #61	; 0x3d
 8000678:	2011      	movs	r0, #17
 800067a:	f7ff ff35 	bl	80004e8 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 800067e:	f7ff ffd2 	bl	8000626 <AntennaOn>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}

08000686 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af02      	add	r7, sp, #8
 800068c:	4603      	mov	r3, r0
 800068e:	6039      	str	r1, [r7, #0]
 8000690:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8000692:	2107      	movs	r1, #7
 8000694:	200d      	movs	r0, #13
 8000696:	f7ff ff27 	bl	80004e8 <Write_MFRC522>

  TagType[0] = reqMode;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2201      	movs	r2, #1
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	200c      	movs	r0, #12
 80006ae:	f000 f80f 	bl	80006d0 <MFRC522_ToCard>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <MFRC522_Request+0x3c>
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	2b10      	cmp	r3, #16
 80006c0:	d001      	beq.n	80006c6 <MFRC522_Request+0x40>
    status = MI_ERR;
 80006c2:	2302      	movs	r3, #2
 80006c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	4613      	mov	r3, r2
 80006e0:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 80006e2:	2302      	movs	r3, #2
 80006e4:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d006      	beq.n	8000702 <MFRC522_ToCard+0x32>
 80006f4:	2b0e      	cmp	r3, #14
 80006f6:	d109      	bne.n	800070c <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 80006f8:	2312      	movs	r3, #18
 80006fa:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 80006fc:	2310      	movs	r3, #16
 80006fe:	777b      	strb	r3, [r7, #29]
        break;
 8000700:	e005      	b.n	800070e <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8000702:	2377      	movs	r3, #119	; 0x77
 8000704:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8000706:	2330      	movs	r3, #48	; 0x30
 8000708:	777b      	strb	r3, [r7, #29]
        break;
 800070a:	e000      	b.n	800070e <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 800070c:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800070e:	7fbb      	ldrb	r3, [r7, #30]
 8000710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff fee5 	bl	80004e8 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	2004      	movs	r0, #4
 8000722:	f7ff ff60 	bl	80005e6 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	200a      	movs	r0, #10
 800072a:	f7ff ff41 	bl	80005b0 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800072e:	2100      	movs	r1, #0
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff fed9 	bl	80004e8 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	e00a      	b.n	8000752 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	2009      	movs	r0, #9
 8000748:	f7ff fece 	bl	80004e8 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	3301      	adds	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3f0      	bcc.n	800073c <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	4619      	mov	r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fec2 	bl	80004e8 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b0c      	cmp	r3, #12
 8000768:	d103      	bne.n	8000772 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	200d      	movs	r0, #13
 800076e:	f7ff ff1f 	bl	80005b0 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000772:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000776:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8000778:	2004      	movs	r0, #4
 800077a:	f7ff fee5 	bl	8000548 <Read_MFRC522>
 800077e:	4603      	mov	r3, r0
 8000780:	773b      	strb	r3, [r7, #28]
    i--;
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	3b01      	subs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00a      	beq.n	80007a4 <MFRC522_ToCard+0xd4>
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <MFRC522_ToCard+0xd4>
 8000798:	7f3a      	ldrb	r2, [r7, #28]
 800079a:	7f7b      	ldrb	r3, [r7, #29]
 800079c:	4013      	ands	r3, r2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0e9      	beq.n	8000778 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	200d      	movs	r0, #13
 80007a8:	f7ff ff1d 	bl	80005e6 <ClearBitMask>

  if (i != 0)
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d052      	beq.n	8000858 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80007b2:	2006      	movs	r0, #6
 80007b4:	f7ff fec8 	bl	8000548 <Read_MFRC522>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f003 031b 	and.w	r3, r3, #27
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d148      	bne.n	8000854 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80007c6:	7f3a      	ldrb	r2, [r7, #28]
 80007c8:	7fbb      	ldrb	r3, [r7, #30]
 80007ca:	4013      	ands	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 80007d6:	2301      	movs	r3, #1
 80007d8:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d13b      	bne.n	8000858 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f7ff feb1 	bl	8000548 <Read_MFRC522>
 80007e6:	4603      	mov	r3, r0
 80007e8:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 80007ea:	200c      	movs	r0, #12
 80007ec:	f7ff feac 	bl	8000548 <Read_MFRC522>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 80007fe:	7f3b      	ldrb	r3, [r7, #28]
 8000800:	3b01      	subs	r3, #1
 8000802:	00da      	lsls	r2, r3, #3
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	4413      	add	r3, r2
 8000808:	461a      	mov	r2, r3
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	e004      	b.n	800081a <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8000810:	7f3b      	ldrb	r3, [r7, #28]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	461a      	mov	r2, r3
 8000816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000818:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 800081a:	7f3b      	ldrb	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d101      	bne.n	8000824 <MFRC522_ToCard+0x154>
        {
          n = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8000824:	7f3b      	ldrb	r3, [r7, #28]
 8000826:	2b10      	cmp	r3, #16
 8000828:	d901      	bls.n	800082e <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 800082a:	2310      	movs	r3, #16
 800082c:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	e00a      	b.n	800084a <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	18d4      	adds	r4, r2, r3
 800083a:	2009      	movs	r0, #9
 800083c:	f7ff fe84 	bl	8000548 <Read_MFRC522>
 8000840:	4603      	mov	r3, r0
 8000842:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	3301      	adds	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	7f3b      	ldrb	r3, [r7, #28]
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	429a      	cmp	r2, r3
 8000850:	d3f0      	bcc.n	8000834 <MFRC522_ToCard+0x164>
 8000852:	e001      	b.n	8000858 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8000854:	2302      	movs	r3, #2
 8000856:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8000858:	7ffb      	ldrb	r3, [r7, #31]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}

08000862 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af02      	add	r7, sp, #8
 8000868:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 800086a:	2300      	movs	r3, #0
 800086c:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800086e:	2100      	movs	r1, #0
 8000870:	200d      	movs	r0, #13
 8000872:	f7ff fe39 	bl	80004e8 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2293      	movs	r2, #147	; 0x93
 800087a:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	2220      	movs	r2, #32
 8000882:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2202      	movs	r2, #2
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff ff1d 	bl	80006d0 <MFRC522_ToCard>
 8000896:	4603      	mov	r3, r0
 8000898:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d118      	bne.n	80008d2 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	73bb      	strb	r3, [r7, #14]
 80008a4:	e009      	b.n	80008ba <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	4053      	eors	r3, r2
 80008b2:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73bb      	strb	r3, [r7, #14]
 80008ba:	7bbb      	ldrb	r3, [r7, #14]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d9f2      	bls.n	80008a6 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	7b7a      	ldrb	r2, [r7, #13]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d001      	beq.n	80008d2 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 80008ce:	2302      	movs	r3, #2
 80008d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80008e6:	4a38      	ldr	r2, [pc, #224]	; (80009c8 <HD44780_Init+0xec>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <HD44780_Init+0xf0>)
 80008ee:	2208      	movs	r2, #8
 80008f0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80008f2:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <HD44780_Init+0xf4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <HD44780_Init+0xec>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d907      	bls.n	8000910 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000900:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <HD44780_Init+0xf4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <HD44780_Init+0xf4>)
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e006      	b.n	800091e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <HD44780_Init+0xf4>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <HD44780_Init+0xf4>)
 800091c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800091e:	f000 f985 	bl	8000c2c <DelayInit>
  HAL_Delay(50);
 8000922:	2032      	movs	r0, #50	; 0x32
 8000924:	f001 f842 	bl	80019ac <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <HD44780_Init+0xf0>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f943 	bl	8000bb8 <ExpanderWrite>
  HAL_Delay(1000);
 8000932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000936:	f001 f839 	bl	80019ac <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800093a:	2030      	movs	r0, #48	; 0x30
 800093c:	f000 f92b 	bl	8000b96 <Write4Bits>
  DelayUS(4500);
 8000940:	f241 1094 	movw	r0, #4500	; 0x1194
 8000944:	f000 f99c 	bl	8000c80 <DelayUS>

  Write4Bits(0x03 << 4);
 8000948:	2030      	movs	r0, #48	; 0x30
 800094a:	f000 f924 	bl	8000b96 <Write4Bits>
  DelayUS(4500);
 800094e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000952:	f000 f995 	bl	8000c80 <DelayUS>

  Write4Bits(0x03 << 4);
 8000956:	2030      	movs	r0, #48	; 0x30
 8000958:	f000 f91d 	bl	8000b96 <Write4Bits>
  DelayUS(4500);
 800095c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000960:	f000 f98e 	bl	8000c80 <DelayUS>

  Write4Bits(0x02 << 4);
 8000964:	2020      	movs	r0, #32
 8000966:	f000 f916 	bl	8000b96 <Write4Bits>
  DelayUS(100);
 800096a:	2064      	movs	r0, #100	; 0x64
 800096c:	f000 f988 	bl	8000c80 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HD44780_Init+0xf4>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f8ce 	bl	8000b1c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HD44780_Init+0xf8>)
 8000982:	2204      	movs	r2, #4
 8000984:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000986:	f000 f875 	bl	8000a74 <HD44780_Display>
  HD44780_Clear();
 800098a:	f000 f82b 	bl	80009e4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HD44780_Init+0xfc>)
 8000990:	2202      	movs	r2, #2
 8000992:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HD44780_Init+0xfc>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f8bc 	bl	8000b1c <SendCommand>
  DelayUS(4500);
 80009a4:	f241 1094 	movw	r0, #4500	; 0x1194
 80009a8:	f000 f96a 	bl	8000c80 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80009ac:	490b      	ldr	r1, [pc, #44]	; (80009dc <HD44780_Init+0x100>)
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f876 	bl	8000aa0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80009b4:	490a      	ldr	r1, [pc, #40]	; (80009e0 <HD44780_Init+0x104>)
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 f872 	bl	8000aa0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80009bc:	f000 f81d 	bl	80009fa <HD44780_Home>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000005f 	.word	0x2000005f
 80009cc:	20000060 	.word	0x20000060
 80009d0:	2000005c 	.word	0x2000005c
 80009d4:	2000005d 	.word	0x2000005d
 80009d8:	2000005e 	.word	0x2000005e
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008

080009e4 <HD44780_Clear>:

void HD44780_Clear()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f000 f897 	bl	8000b1c <SendCommand>
  DelayUS(2000);
 80009ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f2:	f000 f945 	bl	8000c80 <DelayUS>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HD44780_Home>:

void HD44780_Home()
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80009fe:	2002      	movs	r0, #2
 8000a00:	f000 f88c 	bl	8000b1c <SendCommand>
  DelayUS(2000);
 8000a04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a08:	f000 f93a 	bl	8000c80 <DelayUS>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HD44780_SetCursor+0x5c>)
 8000a22:	f107 0408 	add.w	r4, r7, #8
 8000a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HD44780_SetCursor+0x60>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	79ba      	ldrb	r2, [r7, #6]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d303      	bcc.n	8000a3e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HD44780_SetCursor+0x60>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	3318      	adds	r3, #24
 8000a44:	443b      	add	r3, r7
 8000a46:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f85d 	bl	8000b1c <SendCommand>
}
 8000a62:	bf00      	nop
 8000a64:	371c      	adds	r7, #28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08005734 	.word	0x08005734
 8000a70:	2000005f 	.word	0x2000005f

08000a74 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HD44780_Display+0x28>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HD44780_Display+0x28>)
 8000a84:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HD44780_Display+0x28>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f843 	bl	8000b1c <SendCommand>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000005d 	.word	0x2000005d

08000aa0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f82a 	bl	8000b1c <SendCommand>
  for (int i=0; i<8; i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e009      	b.n	8000ae2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f82e 	bl	8000b38 <SendChar>
  for (int i=0; i<8; i++)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	ddf2      	ble.n	8000ace <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000afa:	e006      	b.n	8000b0a <HD44780_PrintStr+0x18>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f817 	bl	8000b38 <SendChar>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f4      	bne.n	8000afc <HD44780_PrintStr+0xa>
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f812 	bl	8000b54 <Send>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2101      	movs	r1, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f804 	bl	8000b54 <Send>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f023 030f 	bic.w	r3, r3, #15
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f80b 	bl	8000b96 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000b80:	7bba      	ldrb	r2, [r7, #14]
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f804 	bl	8000b96 <Write4Bits>
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f808 	bl	8000bb8 <ExpanderWrite>
  PulseEnable(value);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f820 	bl	8000bf0 <PulseEnable>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <ExpanderWrite+0x30>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000bce:	f107 020f 	add.w	r2, r7, #15
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	214e      	movs	r1, #78	; 0x4e
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <ExpanderWrite+0x34>)
 8000bdc:	f001 fba8 	bl	8002330 <HAL_I2C_Master_Transmit>
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000060 	.word	0x20000060
 8000bec:	200000a8 	.word	0x200000a8

08000bf0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffd8 	bl	8000bb8 <ExpanderWrite>
  DelayUS(20);
 8000c08:	2014      	movs	r0, #20
 8000c0a:	f000 f839 	bl	8000c80 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f023 0304 	bic.w	r3, r3, #4
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ffce 	bl	8000bb8 <ExpanderWrite>
  DelayUS(20);
 8000c1c:	2014      	movs	r0, #20
 8000c1e:	f000 f82f 	bl	8000c80 <DelayUS>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <DelayInit>:

static void DelayInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <DelayInit+0x4c>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <DelayInit+0x4c>)
 8000c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c3a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <DelayInit+0x4c>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <DelayInit+0x4c>)
 8000c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c46:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <DelayInit+0x50>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <DelayInit+0x50>)
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <DelayInit+0x50>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <DelayInit+0x50>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <DelayInit+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000c66:	bf00      	nop
  __ASM volatile ("NOP");
 8000c68:	bf00      	nop
  __ASM volatile ("NOP");
 8000c6a:	bf00      	nop
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000edf0 	.word	0xe000edf0
 8000c7c:	e0001000 	.word	0xe0001000

08000c80 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <DelayUS+0x44>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <DelayUS+0x48>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9a      	lsrs	r2, r3, #18
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <DelayUS+0x4c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <DelayUS+0x4c>)
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f6      	bhi.n	8000ca2 <DelayUS+0x22>
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000034 	.word	0x20000034
 8000cc8:	431bde83 	.word	0x431bde83
 8000ccc:	e0001000 	.word	0xe0001000

08000cd0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	  ChiSo++;
	  if (ChiSo == 10)
		  ChiSo = 0;
	  HAL_UART_Receive_IT(&huart1, &KyTuNhan, 1);
  }*/
  if (huart->Instance == huart1.Instance)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_UART_RxCpltCallback+0x88>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d134      	bne.n	8000d4e <HAL_UART_RxCpltCallback+0x7e>
    {
  	  	  	  if (size > 1)
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_UART_RxCpltCallback+0x8c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d913      	bls.n	8000d14 <HAL_UART_RxCpltCallback+0x44>
  	  	  	  {
  	  	  		  ChuoiNhan[rxindex] = KyTuNhan;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_UART_RxCpltCallback+0x90>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_UART_RxCpltCallback+0x94>)
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_UART_RxCpltCallback+0x98>)
 8000cf8:	5499      	strb	r1, [r3, r2]
  	  	  		  rxindex++;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_UART_RxCpltCallback+0x90>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_UART_RxCpltCallback+0x90>)
 8000d04:	701a      	strb	r2, [r3, #0]
  	  	  		  size--;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_RxCpltCallback+0x8c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_UART_RxCpltCallback+0x8c>)
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e017      	b.n	8000d44 <HAL_UART_RxCpltCallback+0x74>
    	  	  	  }
  	  	  	  else
  	  	  	  {
  	  	  		ChuoiNhan[rxindex] = KyTuNhan;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_UART_RxCpltCallback+0x90>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_RxCpltCallback+0x94>)
 8000d1c:	7819      	ldrb	r1, [r3, #0]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_UART_RxCpltCallback+0x98>)
 8000d20:	5499      	strb	r1, [r3, r2]
  	  	  		rxindex = 0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_UART_RxCpltCallback+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  	  	  		CoNhan = 0;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_UART_RxCpltCallback+0x9c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
  	  	  		size = 11;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_UART_RxCpltCallback+0x8c>)
 8000d30:	220b      	movs	r2, #11
 8000d32:	701a      	strb	r2, [r3, #0]
  	  	  		memcpy(temp, ChuoiNhan, sizeof(temp));
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_RxCpltCallback+0xa0>)
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_UART_RxCpltCallback+0x98>)
 8000d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d3a:	c303      	stmia	r3!, {r0, r1}
 8000d3c:	801a      	strh	r2, [r3, #0]
 8000d3e:	3302      	adds	r3, #2
 8000d40:	0c12      	lsrs	r2, r2, #16
 8000d42:	701a      	strb	r2, [r3, #0]
  	  	  		//memcpy(ChuoiNhan, "\0", 11);
  	  	  	  }
  	  	HAL_UART_Receive_IT(&huart1, &KyTuNhan, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	4907      	ldr	r1, [pc, #28]	; (8000d64 <HAL_UART_RxCpltCallback+0x94>)
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <HAL_UART_RxCpltCallback+0x88>)
 8000d4a:	f003 fd23 	bl	8004794 <HAL_UART_Receive_IT>
    }
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000019c 	.word	0x2000019c
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	20000088 	.word	0x20000088
 8000d64:	20000087 	.word	0x20000087
 8000d68:	20000070 	.word	0x20000070
 8000d6c:	2000007b 	.word	0x2000007b
 8000d70:	2000007c 	.word	0x2000007c

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 fda6 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 fa28 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 fb6a 	bl	8001458 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d84:	f000 faba 	bl	80012fc <MX_SPI1_Init>
  MX_TIM11_Init();
 8000d88:	f000 faee 	bl	8001368 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8000d8c:	f000 fb3a 	bl	8001404 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000d90:	f000 fa86 	bl	80012a0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2108      	movs	r1, #8
 8000d98:	48b4      	ldr	r0, [pc, #720]	; (800106c <main+0x2f8>)
 8000d9a:	f001 f96b 	bl	8002074 <HAL_GPIO_WritePin>
  MFRC522_Init();
 8000d9e:	f7ff fc52 	bl	8000646 <MFRC522_Init>
  HAL_UART_Receive_IT(&huart1, &KyTuNhan, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	49b2      	ldr	r1, [pc, #712]	; (8001070 <main+0x2fc>)
 8000da6:	48b3      	ldr	r0, [pc, #716]	; (8001074 <main+0x300>)
 8000da8:	f003 fcf4 	bl	8004794 <HAL_UART_Receive_IT>
  HAL_I2C_Init(&hi2c2);
 8000dac:	48b2      	ldr	r0, [pc, #712]	; (8001078 <main+0x304>)
 8000dae:	f001 f97b 	bl	80020a8 <HAL_I2C_Init>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000db2:	2100      	movs	r1, #0
 8000db4:	48b1      	ldr	r0, [pc, #708]	; (800107c <main+0x308>)
 8000db6:	f003 f86b 	bl	8003e90 <HAL_TIM_PWM_Start>
  htim11.Instance->CCR1 = 100;
 8000dba:	4bb0      	ldr	r3, [pc, #704]	; (800107c <main+0x308>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2264      	movs	r2, #100	; 0x64
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
  //lcd_init();
  HD44780_Init(2);
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f7ff fd8a 	bl	80008dc <HD44780_Init>
  HD44780_Clear();
 8000dc8:	f7ff fe0c 	bl	80009e4 <HD44780_Clear>
  HD44780_SetCursor(0, 0);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fe1e 	bl	8000a10 <HD44780_SetCursor>
  HD44780_PrintStr("Dang ket noi...");
 8000dd4:	48aa      	ldr	r0, [pc, #680]	; (8001080 <main+0x30c>)
 8000dd6:	f7ff fe8c 	bl	8000af2 <HD44780_PrintStr>
  HAL_Delay(10000);
 8000dda:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dde:	f000 fde5 	bl	80019ac <HAL_Delay>
  HD44780_Clear();
 8000de2:	f7ff fdff 	bl	80009e4 <HD44780_Clear>
  HD44780_SetCursor(0, 0);
 8000de6:	2100      	movs	r1, #0
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fe11 	bl	8000a10 <HD44780_SetCursor>
  HD44780_PrintStr("Cho the");
 8000dee:	48a5      	ldr	r0, [pc, #660]	; (8001084 <main+0x310>)
 8000df0:	f7ff fe7f 	bl	8000af2 <HD44780_PrintStr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!MFRC522_Request(PICC_REQIDL, str))
 8000df4:	49a4      	ldr	r1, [pc, #656]	; (8001088 <main+0x314>)
 8000df6:	2026      	movs	r0, #38	; 0x26
 8000df8:	f7ff fc45 	bl	8000686 <MFRC522_Request>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 81ab 	bne.w	800115a <main+0x3e6>
	  	  	  {
	  	  		  if (!MFRC522_Anticoll(str))
 8000e04:	48a0      	ldr	r0, [pc, #640]	; (8001088 <main+0x314>)
 8000e06:	f7ff fd2c 	bl	8000862 <MFRC522_Anticoll>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 81a4 	bne.w	800115a <main+0x3e6>
	  	  		  {
	  	  			//Gui Ma The qua UART
	  	  			HAL_UART_Transmit(&huart1, str, 5, 100);
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	2205      	movs	r2, #5
 8000e16:	499c      	ldr	r1, [pc, #624]	; (8001088 <main+0x314>)
 8000e18:	4896      	ldr	r0, [pc, #600]	; (8001074 <main+0x300>)
 8000e1a:	f003 fc29 	bl	8004670 <HAL_UART_Transmit>
	  	  			//Nhan Tin hieu dieu khien tu ESP32
	  	  			CoNhan = 1;
 8000e1e:	4b9b      	ldr	r3, [pc, #620]	; (800108c <main+0x318>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
	  	  			while (CoNhan);
 8000e24:	bf00      	nop
 8000e26:	4b99      	ldr	r3, [pc, #612]	; (800108c <main+0x318>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1fb      	bne.n	8000e26 <main+0xb2>
	  	  			memcpy(TinHieuDieuKhien, temp, 11);
 8000e2e:	4b98      	ldr	r3, [pc, #608]	; (8001090 <main+0x31c>)
 8000e30:	4a98      	ldr	r2, [pc, #608]	; (8001094 <main+0x320>)
 8000e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e34:	c303      	stmia	r3!, {r0, r1}
 8000e36:	801a      	strh	r2, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	0c12      	lsrs	r2, r2, #16
 8000e3c:	701a      	strb	r2, [r3, #0]
	  	  			//Thuc hien hanh dong
	  	  			//Thuc hien ra vao
	  	  			if ((strcmp((char*)TinHieuDieuKhien, MoCuaVao) == 0) || (strcmp((char*)TinHieuDieuKhien, MoCuaRa) == 0))
 8000e3e:	4996      	ldr	r1, [pc, #600]	; (8001098 <main+0x324>)
 8000e40:	4893      	ldr	r0, [pc, #588]	; (8001090 <main+0x31c>)
 8000e42:	f7ff f9c9 	bl	80001d8 <strcmp>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <main+0xe6>
 8000e4c:	4993      	ldr	r1, [pc, #588]	; (800109c <main+0x328>)
 8000e4e:	4890      	ldr	r0, [pc, #576]	; (8001090 <main+0x31c>)
 8000e50:	f7ff f9c2 	bl	80001d8 <strcmp>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d15a      	bne.n	8000f10 <main+0x19c>
	  	  			  	{
	  	  			  		//Nhan Bien so xe tu ESP32
	  	  					CoNhan = 1;
 8000e5a:	4b8c      	ldr	r3, [pc, #560]	; (800108c <main+0x318>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
	  	  			  		while (CoNhan);
 8000e60:	bf00      	nop
 8000e62:	4b8a      	ldr	r3, [pc, #552]	; (800108c <main+0x318>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1fb      	bne.n	8000e62 <main+0xee>
	  	  			  		memcpy(BienSoXe, temp, 11);
 8000e6a:	4b8d      	ldr	r3, [pc, #564]	; (80010a0 <main+0x32c>)
 8000e6c:	4a89      	ldr	r2, [pc, #548]	; (8001094 <main+0x320>)
 8000e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e70:	c303      	stmia	r3!, {r0, r1}
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	0c12      	lsrs	r2, r2, #16
 8000e78:	701a      	strb	r2, [r3, #0]
	  	  			  		//Thuc hien vao
	  	  			  		if (strcmp((char*)TinHieuDieuKhien, MoCuaVao) == 0)
 8000e7a:	4987      	ldr	r1, [pc, #540]	; (8001098 <main+0x324>)
 8000e7c:	4884      	ldr	r0, [pc, #528]	; (8001090 <main+0x31c>)
 8000e7e:	f7ff f9ab 	bl	80001d8 <strcmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d11d      	bne.n	8000ec4 <main+0x150>
	  	  			  		{
	  	  			  			//In ra man hinh
	  	  			  			HD44780_Clear();
 8000e88:	f7ff fdac 	bl	80009e4 <HD44780_Clear>
	  	  			  			HD44780_PrintStr((char*) BienSoXe);
 8000e8c:	4884      	ldr	r0, [pc, #528]	; (80010a0 <main+0x32c>)
 8000e8e:	f7ff fe30 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			HD44780_SetCursor(0, 1);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fdbb 	bl	8000a10 <HD44780_SetCursor>
	  	  			  			HD44780_PrintStr("Chao mung!");
 8000e9a:	4882      	ldr	r0, [pc, #520]	; (80010a4 <main+0x330>)
 8000e9c:	f7ff fe29 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			//Mo Cua
	  	  			  			htim11.Instance->CCR1 = 50;
 8000ea0:	4b76      	ldr	r3, [pc, #472]	; (800107c <main+0x308>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2232      	movs	r2, #50	; 0x32
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34

	  	  			  			HAL_Delay(5000);
 8000ea8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000eac:	f000 fd7e 	bl	80019ac <HAL_Delay>
	  	  			  			HD44780_Clear();
 8000eb0:	f7ff fd98 	bl	80009e4 <HD44780_Clear>
	  	  			  			HD44780_PrintStr("Cho the");
 8000eb4:	4873      	ldr	r0, [pc, #460]	; (8001084 <main+0x310>)
 8000eb6:	f7ff fe1c 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			//Dong Cua
	  	  			  			htim11.Instance->CCR1 = 100;
 8000eba:	4b70      	ldr	r3, [pc, #448]	; (800107c <main+0x308>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2264      	movs	r2, #100	; 0x64
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
	  	  			  		if (strcmp((char*)TinHieuDieuKhien, MoCuaVao) == 0)
 8000ec2:	e149      	b.n	8001158 <main+0x3e4>
	  	  			  		}
	  	  			  		//Thuc hien ra
	  	  			  		else if (strcmp((char*)TinHieuDieuKhien, MoCuaRa) == 0)
 8000ec4:	4975      	ldr	r1, [pc, #468]	; (800109c <main+0x328>)
 8000ec6:	4872      	ldr	r0, [pc, #456]	; (8001090 <main+0x31c>)
 8000ec8:	f7ff f986 	bl	80001d8 <strcmp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 8142 	bne.w	8001158 <main+0x3e4>
	  	  			  		{
	  	  			  			//In ra man hinh
	  	  			  			HD44780_Clear();
 8000ed4:	f7ff fd86 	bl	80009e4 <HD44780_Clear>
	  	  			  			HD44780_PrintStr((char*) BienSoXe);
 8000ed8:	4871      	ldr	r0, [pc, #452]	; (80010a0 <main+0x32c>)
 8000eda:	f7ff fe0a 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			HD44780_SetCursor(0, 1);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fd95 	bl	8000a10 <HD44780_SetCursor>
	  	  			  			HD44780_PrintStr("Tam biet!");
 8000ee6:	4870      	ldr	r0, [pc, #448]	; (80010a8 <main+0x334>)
 8000ee8:	f7ff fe03 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			//Mo Cua
	  	  			  			htim11.Instance->CCR1 = 50;
 8000eec:	4b63      	ldr	r3, [pc, #396]	; (800107c <main+0x308>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2232      	movs	r2, #50	; 0x32
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34

	  	  			  			HAL_Delay(5000);
 8000ef4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ef8:	f000 fd58 	bl	80019ac <HAL_Delay>
	  	  			  			HD44780_Clear();
 8000efc:	f7ff fd72 	bl	80009e4 <HD44780_Clear>
	  	  			  			HD44780_PrintStr("Cho the");
 8000f00:	4860      	ldr	r0, [pc, #384]	; (8001084 <main+0x310>)
 8000f02:	f7ff fdf6 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			//Dong Cua
	  	  			  			htim11.Instance->CCR1 = 100;
 8000f06:	4b5d      	ldr	r3, [pc, #372]	; (800107c <main+0x308>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2264      	movs	r2, #100	; 0x64
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
	  	  			  		if (strcmp((char*)TinHieuDieuKhien, MoCuaVao) == 0)
 8000f0e:	e123      	b.n	8001158 <main+0x3e4>
	  	  			  		}
	  	  			  	}
	  	  				//Thuc hien khi het tien
	  	  			  	else if (strcmp((char*)TinHieuDieuKhien, HetTien) == 0)
 8000f10:	4966      	ldr	r1, [pc, #408]	; (80010ac <main+0x338>)
 8000f12:	485f      	ldr	r0, [pc, #380]	; (8001090 <main+0x31c>)
 8000f14:	f7ff f960 	bl	80001d8 <strcmp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8090 	bne.w	8001040 <main+0x2cc>
	  	  			  	{
	  	  			  		HD44780_Clear();
 8000f20:	f7ff fd60 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr("So du khong du");
 8000f24:	4862      	ldr	r0, [pc, #392]	; (80010b0 <main+0x33c>)
 8000f26:	f7ff fde4 	bl	8000af2 <HD44780_PrintStr>
	  	  			  		HD44780_SetCursor(0, 1);
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fd6f 	bl	8000a10 <HD44780_SetCursor>
	  	  			  		HD44780_PrintStr("Vui long dua tien mat!");
 8000f32:	4860      	ldr	r0, [pc, #384]	; (80010b4 <main+0x340>)
 8000f34:	f7ff fddd 	bl	8000af2 <HD44780_PrintStr>
	  	  			  		HAL_Delay(1000);
 8000f38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f3c:	f000 fd36 	bl	80019ac <HAL_Delay>
	  	  			  		HD44780_Clear();
 8000f40:	f7ff fd50 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr("Thoi gian cho: ");
 8000f44:	485c      	ldr	r0, [pc, #368]	; (80010b8 <main+0x344>)
 8000f46:	f7ff fdd4 	bl	8000af2 <HD44780_PrintStr>
	  	  			  		HD44780_PrintStr((char*)ThoiGianCho);
 8000f4a:	485c      	ldr	r0, [pc, #368]	; (80010bc <main+0x348>)
 8000f4c:	f7ff fdd1 	bl	8000af2 <HD44780_PrintStr>

	  	  			  		while (ThoiGianCho[0] > '0' && HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin))
 8000f50:	e01d      	b.n	8000f8e <main+0x21a>
	  	  			  		{
	  	  			  			BoDem++;
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <main+0x34c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <main+0x34c>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	  	  			  			if (BoDem == 100)
 8000f5e:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <main+0x34c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d110      	bne.n	8000f88 <main+0x214>
	  	  			  			{
	  	  			  				ThoiGianCho[0]--;
 8000f66:	4b55      	ldr	r3, [pc, #340]	; (80010bc <main+0x348>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b53      	ldr	r3, [pc, #332]	; (80010bc <main+0x348>)
 8000f70:	701a      	strb	r2, [r3, #0]
	  	  			  				BoDem = 0;
 8000f72:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <main+0x34c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	  	  			  				HD44780_Clear();
 8000f78:	f7ff fd34 	bl	80009e4 <HD44780_Clear>
	  	  			  				HD44780_PrintStr("Thoi gian cho: ");
 8000f7c:	484e      	ldr	r0, [pc, #312]	; (80010b8 <main+0x344>)
 8000f7e:	f7ff fdb8 	bl	8000af2 <HD44780_PrintStr>
	  	  			  				HD44780_PrintStr((char*)ThoiGianCho);
 8000f82:	484e      	ldr	r0, [pc, #312]	; (80010bc <main+0x348>)
 8000f84:	f7ff fdb5 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			}
	  	  			  			HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f000 fd0f 	bl	80019ac <HAL_Delay>
	  	  			  		while (ThoiGianCho[0] > '0' && HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin))
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <main+0x348>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b30      	cmp	r3, #48	; 0x30
 8000f94:	d906      	bls.n	8000fa4 <main+0x230>
 8000f96:	2101      	movs	r1, #1
 8000f98:	4834      	ldr	r0, [pc, #208]	; (800106c <main+0x2f8>)
 8000f9a:	f001 f853 	bl	8002044 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1d6      	bne.n	8000f52 <main+0x1de>
	  	  			  		}
	  	  			  		if (ThoiGianCho[0] > '0')
 8000fa4:	4b45      	ldr	r3, [pc, #276]	; (80010bc <main+0x348>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b30      	cmp	r3, #48	; 0x30
 8000faa:	d933      	bls.n	8001014 <main+0x2a0>
	  	  			  		{
	  	  			  			HAL_UART_Transmit(&huart1, (uint8_t*)"1", 1, 100);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4944      	ldr	r1, [pc, #272]	; (80010c4 <main+0x350>)
 8000fb2:	4830      	ldr	r0, [pc, #192]	; (8001074 <main+0x300>)
 8000fb4:	f003 fb5c 	bl	8004670 <HAL_UART_Transmit>
	  	  			  			CoNhan = 1;
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <main+0x318>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
	  	  			  			while (CoNhan);
 8000fbe:	bf00      	nop
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <main+0x318>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1fb      	bne.n	8000fc0 <main+0x24c>
	  	  			  			memcpy(BienSoXe, temp, 11);
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <main+0x32c>)
 8000fca:	4a32      	ldr	r2, [pc, #200]	; (8001094 <main+0x320>)
 8000fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fce:	c303      	stmia	r3!, {r0, r1}
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	0c12      	lsrs	r2, r2, #16
 8000fd6:	701a      	strb	r2, [r3, #0]
	  	  			  			HD44780_Clear();
 8000fd8:	f7ff fd04 	bl	80009e4 <HD44780_Clear>
	  	  			  			HD44780_PrintStr((char*) BienSoXe);
 8000fdc:	4830      	ldr	r0, [pc, #192]	; (80010a0 <main+0x32c>)
 8000fde:	f7ff fd88 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			HD44780_SetCursor(0, 1);
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fd13 	bl	8000a10 <HD44780_SetCursor>
	  	  			  			HD44780_PrintStr("Chao mung!");
 8000fea:	482e      	ldr	r0, [pc, #184]	; (80010a4 <main+0x330>)
 8000fec:	f7ff fd81 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			//Mo Cua
	  	  			  			htim11.Instance->CCR1 = 50;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <main+0x308>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2232      	movs	r2, #50	; 0x32
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34

	  	  			  			HAL_Delay(5000);
 8000ff8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ffc:	f000 fcd6 	bl	80019ac <HAL_Delay>
	  	  			  			HD44780_Clear();
 8001000:	f7ff fcf0 	bl	80009e4 <HD44780_Clear>
	  	  			  			HD44780_PrintStr("Cho the");
 8001004:	481f      	ldr	r0, [pc, #124]	; (8001084 <main+0x310>)
 8001006:	f7ff fd74 	bl	8000af2 <HD44780_PrintStr>
	  	  			  			//Dong Cua
	  	  			  			htim11.Instance->CCR1 = 100;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <main+0x308>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2264      	movs	r2, #100	; 0x64
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
 8001012:	e00e      	b.n	8001032 <main+0x2be>
	  	  			  		}
	  	  			  		else
	  	  			  		{
	  	  			  			HAL_UART_Transmit(&huart1, (uint8_t*)"0", 1, 100);
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2201      	movs	r2, #1
 8001018:	492b      	ldr	r1, [pc, #172]	; (80010c8 <main+0x354>)
 800101a:	4816      	ldr	r0, [pc, #88]	; (8001074 <main+0x300>)
 800101c:	f003 fb28 	bl	8004670 <HAL_UART_Transmit>
	  	  			  			HAL_Delay(1000);
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	f000 fcc2 	bl	80019ac <HAL_Delay>
	  	  			  			HD44780_Clear();
 8001028:	f7ff fcdc 	bl	80009e4 <HD44780_Clear>
	  	  			  			HD44780_PrintStr("Cho the");
 800102c:	4815      	ldr	r0, [pc, #84]	; (8001084 <main+0x310>)
 800102e:	f7ff fd60 	bl	8000af2 <HD44780_PrintStr>
	  	  			  		}
	  	  			  		BoDem = 0;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <main+0x34c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	  	  			  		ThoiGianCho[0] = '9';
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <main+0x348>)
 800103a:	2239      	movs	r2, #57	; 0x39
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e08c      	b.n	800115a <main+0x3e6>
	  	  			  	}
	  	  				//Thuc hien khi chua dang ky
	  	  			  	else if (strcmp((char*)TinHieuDieuKhien, ChuaDangKyRFID) == 0)
 8001040:	4922      	ldr	r1, [pc, #136]	; (80010cc <main+0x358>)
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <main+0x31c>)
 8001044:	f7ff f8c8 	bl	80001d8 <strcmp>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d142      	bne.n	80010d4 <main+0x360>
	  	  			  	{
	  	  			  		HD44780_Clear();
 800104e:	f7ff fcc9 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr((char*) "Chua dang ky the");
 8001052:	481f      	ldr	r0, [pc, #124]	; (80010d0 <main+0x35c>)
 8001054:	f7ff fd4d 	bl	8000af2 <HD44780_PrintStr>
	  	  			  		HAL_Delay(3000);
 8001058:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800105c:	f000 fca6 	bl	80019ac <HAL_Delay>
	  	  			  		HD44780_Clear();
 8001060:	f7ff fcc0 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr("Cho the");
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <main+0x310>)
 8001066:	f7ff fd44 	bl	8000af2 <HD44780_PrintStr>
 800106a:	e076      	b.n	800115a <main+0x3e6>
 800106c:	40020000 	.word	0x40020000
 8001070:	20000087 	.word	0x20000087
 8001074:	2000019c 	.word	0x2000019c
 8001078:	200000a8 	.word	0x200000a8
 800107c:	20000154 	.word	0x20000154
 8001080:	08005744 	.word	0x08005744
 8001084:	08005754 	.word	0x08005754
 8001088:	20000064 	.word	0x20000064
 800108c:	2000007b 	.word	0x2000007b
 8001090:	20000098 	.word	0x20000098
 8001094:	2000007c 	.word	0x2000007c
 8001098:	20000018 	.word	0x20000018
 800109c:	2000001c 	.word	0x2000001c
 80010a0:	2000008c 	.word	0x2000008c
 80010a4:	0800575c 	.word	0x0800575c
 80010a8:	08005768 	.word	0x08005768
 80010ac:	20000024 	.word	0x20000024
 80010b0:	08005774 	.word	0x08005774
 80010b4:	08005784 	.word	0x08005784
 80010b8:	0800579c 	.word	0x0800579c
 80010bc:	20000014 	.word	0x20000014
 80010c0:	200000a4 	.word	0x200000a4
 80010c4:	080057ac 	.word	0x080057ac
 80010c8:	080057b0 	.word	0x080057b0
 80010cc:	20000028 	.word	0x20000028
 80010d0:	080057b4 	.word	0x080057b4
	  	  			  	}
	  	  				//Thuc hien khi them the thanh cong
	  	  			  	else if (strcmp((char*)TinHieuDieuKhien, ThemThanhCong) == 0)
 80010d4:	4933      	ldr	r1, [pc, #204]	; (80011a4 <main+0x430>)
 80010d6:	4834      	ldr	r0, [pc, #208]	; (80011a8 <main+0x434>)
 80010d8:	f7ff f87e 	bl	80001d8 <strcmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10e      	bne.n	8001100 <main+0x38c>
	  	  			  	{
	  	  			  		HD44780_Clear();
 80010e2:	f7ff fc7f 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr((char*) "Them thanh cong");
 80010e6:	4831      	ldr	r0, [pc, #196]	; (80011ac <main+0x438>)
 80010e8:	f7ff fd03 	bl	8000af2 <HD44780_PrintStr>
	  	  			  		HAL_Delay(3000);
 80010ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010f0:	f000 fc5c 	bl	80019ac <HAL_Delay>
	  	  			  		HD44780_Clear();
 80010f4:	f7ff fc76 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr("Cho the");
 80010f8:	482d      	ldr	r0, [pc, #180]	; (80011b0 <main+0x43c>)
 80010fa:	f7ff fcfa 	bl	8000af2 <HD44780_PrintStr>
 80010fe:	e02c      	b.n	800115a <main+0x3e6>
	  	  			  	}
	  	  				//THuc hien khi bi loi mang
	  	  			  	else if (strcmp((char*)TinHieuDieuKhien, LoiMang) == 0)
 8001100:	492c      	ldr	r1, [pc, #176]	; (80011b4 <main+0x440>)
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <main+0x434>)
 8001104:	f7ff f868 	bl	80001d8 <strcmp>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10e      	bne.n	800112c <main+0x3b8>
	  	  			  	{
	  	  			  		HD44780_Clear();
 800110e:	f7ff fc69 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr((char*) "Loi mang!Thu lai");
 8001112:	4829      	ldr	r0, [pc, #164]	; (80011b8 <main+0x444>)
 8001114:	f7ff fced 	bl	8000af2 <HD44780_PrintStr>
	  	  			  		HAL_Delay(3000);
 8001118:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800111c:	f000 fc46 	bl	80019ac <HAL_Delay>
	  	  			  		HD44780_Clear();
 8001120:	f7ff fc60 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr("Cho the");
 8001124:	4822      	ldr	r0, [pc, #136]	; (80011b0 <main+0x43c>)
 8001126:	f7ff fce4 	bl	8000af2 <HD44780_PrintStr>
 800112a:	e016      	b.n	800115a <main+0x3e6>
	  	  			  	}
	  	  			  	else if (strcmp((char*)TinHieuDieuKhien, ChuaDangKyTaiKhoan) == 0)
 800112c:	4923      	ldr	r1, [pc, #140]	; (80011bc <main+0x448>)
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <main+0x434>)
 8001130:	f7ff f852 	bl	80001d8 <strcmp>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <main+0x3e6>
	  	  			  	{
	  	  			  		HD44780_Clear();
 800113a:	f7ff fc53 	bl	80009e4 <HD44780_Clear>
	  	  			  		HD44780_PrintStr((char*) "Chua dang ky TK");
 800113e:	4820      	ldr	r0, [pc, #128]	; (80011c0 <main+0x44c>)
 8001140:	f7ff fcd7 	bl	8000af2 <HD44780_PrintStr>
		  	  			  	HAL_Delay(3000);
 8001144:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001148:	f000 fc30 	bl	80019ac <HAL_Delay>
	  	  			  		HD44780_Clear();
 800114c:	f7ff fc4a 	bl	80009e4 <HD44780_Clear>
		  	  			  	HD44780_PrintStr("Cho the");
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <main+0x43c>)
 8001152:	f7ff fcce 	bl	8000af2 <HD44780_PrintStr>
 8001156:	e000      	b.n	800115a <main+0x3e6>
	  	  			  		if (strcmp((char*)TinHieuDieuKhien, MoCuaVao) == 0)
 8001158:	bf00      	nop
	  	  	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Dieu khien bang nut bam
	  	if (!HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin))
 800115a:	2101      	movs	r1, #1
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <main+0x450>)
 800115e:	f000 ff71 	bl	8002044 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f ae45 	bne.w	8000df4 <main+0x80>
	  	{
	  		//Mo cua, dong cua
	  		if (TrangThaiCua == 0)
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <main+0x454>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d107      	bne.n	8001182 <main+0x40e>
	  		{
	  			//Mo Cua
	  			htim11.Instance->CCR1 = 100;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <main+0x458>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2264      	movs	r2, #100	; 0x64
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
	  			TrangThaiCua = 1;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <main+0x454>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e00a      	b.n	8001198 <main+0x424>
	  		}
	  		else if (TrangThaiCua == 1)
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <main+0x454>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d106      	bne.n	8001198 <main+0x424>
	  		{
	  			//Dong Cua
	  			htim11.Instance->CCR1 = 50;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <main+0x458>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2232      	movs	r2, #50	; 0x32
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
	  			TrangThaiCua = 0;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <main+0x454>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	  		}
	  		HAL_Delay(500);
 8001198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119c:	f000 fc06 	bl	80019ac <HAL_Delay>
	  if (!MFRC522_Request(PICC_REQIDL, str))
 80011a0:	e628      	b.n	8000df4 <main+0x80>
 80011a2:	bf00      	nop
 80011a4:	2000002c 	.word	0x2000002c
 80011a8:	20000098 	.word	0x20000098
 80011ac:	080057c8 	.word	0x080057c8
 80011b0:	08005754 	.word	0x08005754
 80011b4:	20000030 	.word	0x20000030
 80011b8:	080057d8 	.word	0x080057d8
 80011bc:	20000020 	.word	0x20000020
 80011c0:	080057ec 	.word	0x080057ec
 80011c4:	40020000 	.word	0x40020000
 80011c8:	200000a3 	.word	0x200000a3
 80011cc:	20000154 	.word	0x20000154

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	; 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fa70 	bl	80056c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <SystemClock_Config+0xc8>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a26      	ldr	r2, [pc, #152]	; (8001298 <SystemClock_Config+0xc8>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <SystemClock_Config+0xc8>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <SystemClock_Config+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a20      	ldr	r2, [pc, #128]	; (800129c <SystemClock_Config+0xcc>)
 800121a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <SystemClock_Config+0xcc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2310      	movs	r3, #16
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123c:	2300      	movs	r3, #0
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001240:	2308      	movs	r3, #8
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fb73 	bl	8002940 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001260:	f000 f948 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	2103      	movs	r1, #3
 8001280:	4618      	mov	r0, r3
 8001282:	f001 fdd5 	bl	8002e30 <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800128c:	f000 f932 	bl	80014f4 <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	; 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <MX_I2C2_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_I2C2_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_I2C2_Init+0x50>)
 80012de:	f000 fee3 	bl	80020a8 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 f904 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000a8 	.word	0x200000a8
 80012f4:	40005800 	.word	0x40005800
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_SPI1_Init+0x64>)
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <MX_SPI1_Init+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_SPI1_Init+0x64>)
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_SPI1_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_SPI1_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_SPI1_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_SPI1_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_SPI1_Init+0x64>)
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_SPI1_Init+0x64>)
 8001330:	2218      	movs	r2, #24
 8001332:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_SPI1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_SPI1_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_SPI1_Init+0x64>)
 8001348:	220a      	movs	r2, #10
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_SPI1_Init+0x64>)
 800134e:	f001 ff4f 	bl	80031f0 <HAL_SPI_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001358:	f000 f8cc 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000fc 	.word	0x200000fc
 8001364:	40013000 	.word	0x40013000

08001368 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_TIM11_Init+0x94>)
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <MX_TIM11_Init+0x98>)
 8001384:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2000-1;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM11_Init+0x94>)
 8001388:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800138c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM11_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_TIM11_Init+0x94>)
 8001396:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_TIM11_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_TIM11_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_TIM11_Init+0x94>)
 80013aa:	f002 fcc9 	bl	8003d40 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80013b4:	f000 f89e 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80013b8:	4810      	ldr	r0, [pc, #64]	; (80013fc <MX_TIM11_Init+0x94>)
 80013ba:	f002 fd10 	bl	8003dde <HAL_TIM_PWM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80013c4:	f000 f896 	bl	80014f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c8:	2360      	movs	r3, #96	; 0x60
 80013ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	4619      	mov	r1, r3
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_TIM11_Init+0x94>)
 80013e0:	f002 fe06 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80013ea:	f000 f883 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_TIM11_Init+0x94>)
 80013f0:	f000 f970 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000154 	.word	0x20000154
 8001400:	40014800 	.word	0x40014800

08001404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_USART1_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_USART1_UART_Init+0x4c>)
 800143c:	f003 f8cb 	bl	80045d6 <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f000 f855 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000019c 	.word	0x2000019c
 8001454:	40011000 	.word	0x40011000

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <MX_GPIO_Init+0x94>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <MX_GPIO_Init+0x94>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_GPIO_Init+0x94>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_GPIO_Init+0x94>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <MX_GPIO_Init+0x94>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_GPIO_Init+0x94>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2118      	movs	r1, #24
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <MX_GPIO_Init+0x98>)
 80014ac:	f000 fde2 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <MX_GPIO_Init+0x98>)
 80014c4:	f000 fc3a 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80014c8:	2318      	movs	r3, #24
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_GPIO_Init+0x98>)
 80014e0:	f000 fc2c 	bl	8001d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_MspInit+0x4c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <HAL_I2C_MspInit+0xa4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d13c      	bne.n	80015ec <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_I2C_MspInit+0xa8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <HAL_I2C_MspInit+0xa8>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_I2C_MspInit+0xa8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001594:	2312      	movs	r3, #18
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015a0:	2304      	movs	r3, #4
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <HAL_I2C_MspInit+0xac>)
 80015ac:	f000 fbc6 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b0:	2308      	movs	r3, #8
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80015c0:	2309      	movs	r3, #9
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <HAL_I2C_MspInit+0xac>)
 80015cc:	f000 fbb6 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0xa8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_I2C_MspInit+0xa8>)
 80015da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_I2C_MspInit+0xa8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005800 	.word	0x40005800
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_SPI_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_SPI_MspInit+0x88>)
 800162c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_SPI_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800165a:	23e0      	movs	r3, #224	; 0xe0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_SPI_MspInit+0x8c>)
 8001676:	f000 fb61 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40013000 	.word	0x40013000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000

08001690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_TIM_Base_MspInit+0x3c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10d      	bne.n	80016be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40014800 	.word	0x40014800
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_TIM_MspPostInit+0x68>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d11e      	bne.n	8001734 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_TIM_MspPostInit+0x6c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_TIM_MspPostInit+0x6c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001716:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001724:	2303      	movs	r3, #3
 8001726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <HAL_TIM_MspPostInit+0x70>)
 8001730:	f000 fb04 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40014800 	.word	0x40014800
 8001740:	40023800 	.word	0x40023800
 8001744:	40020400 	.word	0x40020400

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_UART_MspInit+0x94>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d134      	bne.n	80017d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0x98>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <HAL_UART_MspInit+0x98>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x98>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x98>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_UART_MspInit+0x98>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0x98>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b4:	2307      	movs	r3, #7
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4809      	ldr	r0, [pc, #36]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 80017c0:	f000 fabc 	bl	8001d3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	2025      	movs	r0, #37	; 0x25
 80017ca:	f000 f9ee 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ce:	2025      	movs	r0, #37	; 0x25
 80017d0:	f000 fa07 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f89a 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART1_IRQHandler+0x10>)
 8001842:	f002 ffd7 	bl	80047f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000019c 	.word	0x2000019c

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187a:	490e      	ldr	r1, [pc, #56]	; (80018b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001890:	4c0b      	ldr	r4, [pc, #44]	; (80018c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800189e:	f7ff ffd7 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f003 ff17 	bl	80056d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fa65 	bl	8000d74 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80018b8:	08005824 	.word	0x08005824
  ldr r2, =_sbss
 80018bc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80018c0:	200001e4 	.word	0x200001e4

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 f94f 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	200f      	movs	r0, #15
 80018f8:	f000 f808 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fe00 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x54>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x58>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f967 	bl	8001bfe <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 f92f 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <HAL_InitTick+0x5c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000034 	.word	0x20000034
 8001964:	2000003c 	.word	0x2000003c
 8001968:	20000038 	.word	0x20000038

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2000003c 	.word	0x2000003c
 8001990:	200001e0 	.word	0x200001e0

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200001e0 	.word	0x200001e0

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000003c 	.word	0x2000003c

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff feb6 	bl	8001994 <HAL_GetTick>
 8001c28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d008      	beq.n	8001c48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e052      	b.n	8001cee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0216 	bic.w	r2, r2, #22
 8001c56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d103      	bne.n	8001c78 <HAL_DMA_Abort+0x62>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0208 	bic.w	r2, r2, #8
 8001c86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c98:	e013      	b.n	8001cc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c9a:	f7ff fe7b 	bl	8001994 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d90c      	bls.n	8001cc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e015      	b.n	8001cee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e4      	bne.n	8001c9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	223f      	movs	r2, #63	; 0x3f
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d004      	beq.n	8001d14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e00c      	b.n	8001d2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2205      	movs	r2, #5
 8001d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e159      	b.n	800200c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8148 	bne.w	8002006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d005      	beq.n	8001d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d130      	bne.n	8001df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 0201 	and.w	r2, r3, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d017      	beq.n	8001e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a2 	beq.w	8002006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a56      	ldr	r2, [pc, #344]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_GPIO_Init+0x2ec>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a49      	ldr	r2, [pc, #292]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d019      	beq.n	8001f3e <HAL_GPIO_Init+0x202>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a48      	ldr	r2, [pc, #288]	; (8002030 <HAL_GPIO_Init+0x2f4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0x1fe>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a47      	ldr	r2, [pc, #284]	; (8002034 <HAL_GPIO_Init+0x2f8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00d      	beq.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a46      	ldr	r2, [pc, #280]	; (8002038 <HAL_GPIO_Init+0x2fc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x1f6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a45      	ldr	r2, [pc, #276]	; (800203c <HAL_GPIO_Init+0x300>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_GPIO_Init+0x1f2>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f50:	4935      	ldr	r1, [pc, #212]	; (8002028 <HAL_GPIO_Init+0x2ec>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5e:	4b38      	ldr	r3, [pc, #224]	; (8002040 <HAL_GPIO_Init+0x304>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <HAL_GPIO_Init+0x304>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_GPIO_Init+0x304>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fac:	4a24      	ldr	r2, [pc, #144]	; (8002040 <HAL_GPIO_Init+0x304>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_GPIO_Init+0x304>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd6:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <HAL_GPIO_Init+0x304>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_GPIO_Init+0x304>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002000:	4a0f      	ldr	r2, [pc, #60]	; (8002040 <HAL_GPIO_Init+0x304>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f aea2 	bls.w	8001d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40013800 	.word	0x40013800
 800202c:	40020000 	.word	0x40020000
 8002030:	40020400 	.word	0x40020400
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00
 800203c:	40021000 	.word	0x40021000
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e001      	b.n	8002066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e12b      	b.n	8002312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fa3e 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800210a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800210c:	f001 f848 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a81      	ldr	r2, [pc, #516]	; (800231c <HAL_I2C_Init+0x274>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d807      	bhi.n	800212c <HAL_I2C_Init+0x84>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a80      	ldr	r2, [pc, #512]	; (8002320 <HAL_I2C_Init+0x278>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e006      	b.n	800213a <HAL_I2C_Init+0x92>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a7d      	ldr	r2, [pc, #500]	; (8002324 <HAL_I2C_Init+0x27c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e7      	b.n	8002312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a78      	ldr	r2, [pc, #480]	; (8002328 <HAL_I2C_Init+0x280>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0c9b      	lsrs	r3, r3, #18
 800214c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_I2C_Init+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d802      	bhi.n	800217c <HAL_I2C_Init+0xd4>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	e009      	b.n	8002190 <HAL_I2C_Init+0xe8>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_I2C_Init+0x284>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	495c      	ldr	r1, [pc, #368]	; (800231c <HAL_I2C_Init+0x274>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d819      	bhi.n	80021e4 <HAL_I2C_Init+0x13c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e59      	subs	r1, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c4:	400b      	ands	r3, r1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_I2C_Init+0x138>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	e051      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e04f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_I2C_Init+0x168>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e012      	b.n	8002236 <HAL_I2C_Init+0x18e>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	0099      	lsls	r1, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x196>
 800223a:	2301      	movs	r3, #1
 800223c:	e022      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <HAL_I2C_Init+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e58      	subs	r0, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	440b      	add	r3, r1
 8002254:	fbb0 f3f3 	udiv	r3, r0, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6911      	ldr	r1, [r2, #16]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	000186a0 	.word	0x000186a0
 8002320:	001e847f 	.word	0x001e847f
 8002324:	003d08ff 	.word	0x003d08ff
 8002328:	431bde83 	.word	0x431bde83
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fb26 	bl	8001994 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 80e0 	bne.w	8002518 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2319      	movs	r3, #25
 800235e:	2201      	movs	r2, #1
 8002360:	4970      	ldr	r1, [pc, #448]	; (8002524 <HAL_I2C_Master_Transmit+0x1f4>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f964 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	e0d3      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Master_Transmit+0x50>
 800237c:	2302      	movs	r3, #2
 800237e:	e0cc      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d007      	beq.n	80023a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2221      	movs	r2, #33	; 0x21
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2210      	movs	r2, #16
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_I2C_Master_Transmit+0x1f8>)
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f89c 	bl	800252c <I2C_MasterRequestWrite>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e08d      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002414:	e066      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f9de 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f9ce 	bl	800285e <I2C_WaitOnBTFFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d107      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e01a      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d194      	bne.n	8002416 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	00100002 	.word	0x00100002
 8002528:	ffff0000 	.word	0xffff0000

0800252c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	460b      	mov	r3, r1
 800253a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d006      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d003      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002554:	d108      	bne.n	8002568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00b      	b.n	8002580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	2b12      	cmp	r3, #18
 800256e:	d107      	bne.n	8002580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f84f 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00d      	beq.n	80025b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a6:	d103      	bne.n	80025b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e035      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025bc:	d108      	bne.n	80025d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	e01b      	b.n	8002608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	11db      	asrs	r3, r3, #7
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0306 	and.w	r3, r3, #6
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f063 030f 	orn	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <I2C_MasterRequestWrite+0xfc>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f875 	bl	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e010      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <I2C_MasterRequestWrite+0x100>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f865 	bl	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010008 	.word	0x00010008
 800262c:	00010002 	.word	0x00010002

08002630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	e025      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d021      	beq.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f9a3 	bl	8001994 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e023      	b.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10d      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	e00c      	b.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d0b6      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ec:	e051      	b.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d123      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e046      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d021      	beq.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff f921 	bl	8001994 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e020      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e00b      	b.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d18d      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e02d      	b.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f878 	bl	80028e0 <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e02d      	b.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d021      	beq.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7ff f8c7 	bl	8001994 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d1ca      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800286a:	e02d      	b.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f837 	bl	80028e0 <I2C_IsAcknowledgeFailed>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e02d      	b.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d021      	beq.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002884:	f7ff f886 	bl	8001994 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d302      	bcc.n	800289a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e007      	b.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d1ca      	bne.n	800286c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d11b      	bne.n	8002930 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002900:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e267      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295e:	4b88      	ldr	r3, [pc, #544]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00c      	beq.n	8002984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b85      	ldr	r3, [pc, #532]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d112      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b82      	ldr	r3, [pc, #520]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b7e      	ldr	r3, [pc, #504]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d157      	bne.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e242      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x74>
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a75      	ldr	r2, [pc, #468]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b70      	ldr	r3, [pc, #448]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6f      	ldr	r2, [pc, #444]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6c      	ldr	r2, [pc, #432]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029d8:	4b69      	ldr	r3, [pc, #420]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a68      	ldr	r2, [pc, #416]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe ffcc 	bl	8001994 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe ffc8 	bl	8001994 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e207      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe ffb8 	bl	8001994 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe ffb4 	bl	8001994 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1f3      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b51      	ldr	r3, [pc, #324]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c7      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4937      	ldr	r1, [pc, #220]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_OscConfig+0x244>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe ff6d 	bl	8001994 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe ff69 	bl	8001994 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a8      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4925      	ldr	r1, [pc, #148]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCC_OscConfig+0x244>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe ff4c 	bl	8001994 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe ff48 	bl	8001994 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e187      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d036      	beq.n	8002b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_RCC_OscConfig+0x248>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe ff2c 	bl	8001994 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe ff28 	bl	8001994 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e167      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x200>
 8002b5e:	e01b      	b.n	8002b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_OscConfig+0x248>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe ff15 	bl	8001994 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e00e      	b.n	8002b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe ff11 	bl	8001994 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d907      	bls.n	8002b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e150      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	42470000 	.word	0x42470000
 8002b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ea      	bne.n	8002b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8097 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002baa:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b7d      	ldr	r3, [pc, #500]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b7a      	ldr	r3, [pc, #488]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b77      	ldr	r3, [pc, #476]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b74      	ldr	r3, [pc, #464]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a73      	ldr	r2, [pc, #460]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fed1 	bl	8001994 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe fecd 	bl	8001994 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e10c      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2ea>
 8002c1c:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a63      	ldr	r2, [pc, #396]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	e01c      	b.n	8002c64 <HAL_RCC_OscConfig+0x324>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x30c>
 8002c32:	4b5f      	ldr	r3, [pc, #380]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5e      	ldr	r2, [pc, #376]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b5c      	ldr	r3, [pc, #368]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a5b      	ldr	r2, [pc, #364]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x324>
 8002c4c:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a57      	ldr	r2, [pc, #348]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a54      	ldr	r2, [pc, #336]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe fe92 	bl	8001994 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe fe8e 	bl	8001994 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0cb      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ee      	beq.n	8002c74 <HAL_RCC_OscConfig+0x334>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7fe fe7c 	bl	8001994 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fe78 	bl	8001994 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0b5      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb6:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	4a38      	ldr	r2, [pc, #224]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a1 	beq.w	8002e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cde:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d05c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d141      	bne.n	8002d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fe4c 	bl	8001994 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fe48 	bl	8001994 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e087      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	491b      	ldr	r1, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fe21 	bl	8001994 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fe fe1d 	bl	8001994 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e05c      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x416>
 8002d74:	e054      	b.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fe0a 	bl	8001994 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fe06 	bl	8001994 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e045      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x444>
 8002da2:	e03d      	b.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e038      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40007000 	.word	0x40007000
 8002db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d11a      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d111      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	3b01      	subs	r3, #1
 8002e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cc      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d044      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e067      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fd38 	bl	8001994 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe fd34 	bl	8001994 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d20c      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490a      	ldr	r1, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fc98 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080057fc 	.word	0x080057fc
 8002ff4:	20000034 	.word	0x20000034
 8002ff8:	20000038 	.word	0x20000038

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003000:	b090      	sub	sp, #64	; 0x40
 8003002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
 8003008:	2300      	movs	r3, #0
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300c:	2300      	movs	r3, #0
 800300e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003014:	4b59      	ldr	r3, [pc, #356]	; (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d00d      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x40>
 8003020:	2b08      	cmp	r3, #8
 8003022:	f200 80a1 	bhi.w	8003168 <HAL_RCC_GetSysClockFreq+0x16c>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x3a>
 800302e:	e09b      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_GetSysClockFreq+0x184>)
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003034:	e09b      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003036:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_GetSysClockFreq+0x188>)
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800303a:	e098      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003046:	4b4d      	ldr	r3, [pc, #308]	; (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d028      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	2200      	movs	r2, #0
 800305a:	623b      	str	r3, [r7, #32]
 800305c:	627a      	str	r2, [r7, #36]	; 0x24
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003064:	2100      	movs	r1, #0
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_GetSysClockFreq+0x188>)
 8003068:	fb03 f201 	mul.w	r2, r3, r1
 800306c:	2300      	movs	r3, #0
 800306e:	fb00 f303 	mul.w	r3, r0, r3
 8003072:	4413      	add	r3, r2
 8003074:	4a43      	ldr	r2, [pc, #268]	; (8003184 <HAL_RCC_GetSysClockFreq+0x188>)
 8003076:	fba0 1202 	umull	r1, r2, r0, r2
 800307a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800307c:	460a      	mov	r2, r1
 800307e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003082:	4413      	add	r3, r2
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	2200      	movs	r2, #0
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	61fa      	str	r2, [r7, #28]
 800308e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003092:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003096:	f7fd f8a9 	bl	80001ec <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4613      	mov	r3, r2
 80030a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a2:	e053      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	2200      	movs	r2, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	617a      	str	r2, [r7, #20]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030b6:	f04f 0b00 	mov.w	fp, #0
 80030ba:	4652      	mov	r2, sl
 80030bc:	465b      	mov	r3, fp
 80030be:	f04f 0000 	mov.w	r0, #0
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	0159      	lsls	r1, r3, #5
 80030c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030cc:	0150      	lsls	r0, r2, #5
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	ebb2 080a 	subs.w	r8, r2, sl
 80030d6:	eb63 090b 	sbc.w	r9, r3, fp
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030ee:	ebb2 0408 	subs.w	r4, r2, r8
 80030f2:	eb63 0509 	sbc.w	r5, r3, r9
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	00eb      	lsls	r3, r5, #3
 8003100:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003104:	00e2      	lsls	r2, r4, #3
 8003106:	4614      	mov	r4, r2
 8003108:	461d      	mov	r5, r3
 800310a:	eb14 030a 	adds.w	r3, r4, sl
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	eb45 030b 	adc.w	r3, r5, fp
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003122:	4629      	mov	r1, r5
 8003124:	028b      	lsls	r3, r1, #10
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312c:	4621      	mov	r1, r4
 800312e:	028a      	lsls	r2, r1, #10
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	2200      	movs	r2, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	60fa      	str	r2, [r7, #12]
 800313c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003140:	f7fd f854 	bl	80001ec <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800315c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetSysClockFreq+0x184>)
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003170:	4618      	mov	r0, r3
 8003172:	3740      	adds	r7, #64	; 0x40
 8003174:	46bd      	mov	sp, r7
 8003176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	00f42400 	.word	0x00f42400
 8003184:	017d7840 	.word	0x017d7840

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCC_GetHCLKFreq+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000034 	.word	0x20000034

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a4:	f7ff fff0 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0a9b      	lsrs	r3, r3, #10
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	0800580c 	.word	0x0800580c

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031cc:	f7ff ffdc 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0b5b      	lsrs	r3, r3, #13
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	0800580c 	.word	0x0800580c

080031f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07b      	b.n	80032fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d108      	bne.n	800321c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003212:	d009      	beq.n	8003228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
 800321a:	e005      	b.n	8003228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe f9dc 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	ea42 0103 	orr.w	r1, r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0104 	and.w	r1, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0210 	and.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b088      	sub	sp, #32
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_SPI_Transmit+0x22>
 8003320:	2302      	movs	r3, #2
 8003322:	e126      	b.n	8003572 <HAL_SPI_Transmit+0x270>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800332c:	f7fe fb32 	bl	8001994 <HAL_GetTick>
 8003330:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003346:	e10b      	b.n	8003560 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Transmit+0x52>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003358:	e102      	b.n	8003560 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	88fa      	ldrh	r2, [r7, #6]
 8003372:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a0:	d10f      	bne.n	80033c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d007      	beq.n	80033e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e8:	d14b      	bne.n	8003482 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_SPI_Transmit+0xf6>
 80033f2:	8afb      	ldrh	r3, [r7, #22]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d13e      	bne.n	8003476 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800341c:	e02b      	b.n	8003476 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d112      	bne.n	8003452 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003450:	e011      	b.n	8003476 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003452:	f7fe fa9f 	bl	8001994 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d803      	bhi.n	800346a <HAL_SPI_Transmit+0x168>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d102      	bne.n	8003470 <HAL_SPI_Transmit+0x16e>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003474:	e074      	b.n	8003560 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ce      	bne.n	800341e <HAL_SPI_Transmit+0x11c>
 8003480:	e04c      	b.n	800351c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_SPI_Transmit+0x18e>
 800348a:	8afb      	ldrh	r3, [r7, #22]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d140      	bne.n	8003512 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034b6:	e02c      	b.n	8003512 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d113      	bne.n	80034ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ec:	e011      	b.n	8003512 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ee:	f7fe fa51 	bl	8001994 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d803      	bhi.n	8003506 <HAL_SPI_Transmit+0x204>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d102      	bne.n	800350c <HAL_SPI_Transmit+0x20a>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003510:	e026      	b.n	8003560 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1cd      	bne.n	80034b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fbcb 	bl	8003cbc <SPI_EndRxTxTransaction>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e000      	b.n	8003560 <HAL_SPI_Transmit+0x25e>
  }

error:
 800355e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003570:	7ffb      	ldrb	r3, [r7, #31]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b088      	sub	sp, #32
 800357e:	af02      	add	r7, sp, #8
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003596:	d112      	bne.n	80035be <HAL_SPI_Receive+0x44>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2204      	movs	r2, #4
 80035a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f8f1 	bl	800379c <HAL_SPI_TransmitReceive>
 80035ba:	4603      	mov	r3, r0
 80035bc:	e0ea      	b.n	8003794 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_SPI_Receive+0x52>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e0e3      	b.n	8003794 <HAL_SPI_Receive+0x21a>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d4:	f7fe f9de 	bl	8001994 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
 80035e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ea:	e0ca      	b.n	8003782 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_SPI_Receive+0x7e>
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035fc:	e0c1      	b.n	8003782 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2204      	movs	r2, #4
 8003602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d10f      	bne.n	8003666 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d007      	beq.n	8003684 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d162      	bne.n	8003752 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800368c:	e02e      	b.n	80036ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d115      	bne.n	80036c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f103 020c 	add.w	r2, r3, #12
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036c6:	e011      	b.n	80036ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c8:	f7fe f964 	bl	8001994 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d803      	bhi.n	80036e0 <HAL_SPI_Receive+0x166>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d102      	bne.n	80036e6 <HAL_SPI_Receive+0x16c>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036ea:	e04a      	b.n	8003782 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1cb      	bne.n	800368e <HAL_SPI_Receive+0x114>
 80036f6:	e031      	b.n	800375c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d113      	bne.n	800372e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	b292      	uxth	r2, r2
 8003712:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	1c9a      	adds	r2, r3, #2
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800372c:	e011      	b.n	8003752 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372e:	f7fe f931 	bl	8001994 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d803      	bhi.n	8003746 <HAL_SPI_Receive+0x1cc>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d102      	bne.n	800374c <HAL_SPI_Receive+0x1d2>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003750:	e017      	b.n	8003782 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1cd      	bne.n	80036f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	6839      	ldr	r1, [r7, #0]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fa45 	bl	8003bf0 <SPI_EndRxTransaction>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
 800377e:	e000      	b.n	8003782 <HAL_SPI_Receive+0x208>
  }

error :
 8003780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	; 0x30
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037aa:	2301      	movs	r3, #1
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x26>
 80037be:	2302      	movs	r3, #2
 80037c0:	e18a      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x33c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ca:	f7fe f8e3 	bl	8001994 <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d00f      	beq.n	800380c <HAL_SPI_TransmitReceive+0x70>
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f2:	d107      	bne.n	8003804 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <HAL_SPI_TransmitReceive+0x68>
 80037fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003800:	2b04      	cmp	r3, #4
 8003802:	d003      	beq.n	800380c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003804:	2302      	movs	r3, #2
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800380a:	e15b      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_SPI_TransmitReceive+0x82>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_TransmitReceive+0x82>
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003824:	e14e      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2205      	movs	r2, #5
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	887a      	ldrh	r2, [r7, #2]
 800384a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d007      	beq.n	800388e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d178      	bne.n	800398a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_SPI_TransmitReceive+0x10a>
 80038a0:	8b7b      	ldrh	r3, [r7, #26]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d166      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	1c9a      	adds	r2, r3, #2
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ca:	e053      	b.n	8003974 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d11b      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x176>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d016      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x176>
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d113      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	1c9a      	adds	r2, r3, #2
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d119      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x1b8>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d014      	beq.n	8003954 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	b292      	uxth	r2, r2
 8003936:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	1c9a      	adds	r2, r3, #2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003950:	2301      	movs	r3, #1
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003954:	f7fe f81e 	bl	8001994 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003960:	429a      	cmp	r2, r3
 8003962:	d807      	bhi.n	8003974 <HAL_SPI_TransmitReceive+0x1d8>
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d003      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003972:	e0a7      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1a6      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x130>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1a1      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x130>
 8003988:	e07c      	b.n	8003a84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x1fc>
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d16b      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039be:	e057      	b.n	8003a70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d11c      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x26c>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x26c>
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d114      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d119      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x2ae>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d014      	beq.n	8003a4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a46:	2301      	movs	r3, #1
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a4a:	f7fd ffa3 	bl	8001994 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d803      	bhi.n	8003a62 <HAL_SPI_TransmitReceive+0x2c6>
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x2cc>
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a6e:	e029      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1a2      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x224>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d19d      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f917 	bl	8003cbc <SPI_EndRxTxTransaction>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003aa0:	e010      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	e000      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ac2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3730      	adds	r7, #48	; 0x30
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003af0:	f7fd ff50 	bl	8001994 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b00:	f7fd ff48 	bl	8001994 <HAL_GetTick>
 8003b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	0d1b      	lsrs	r3, r3, #20
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b16:	e054      	b.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d050      	beq.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b20:	f7fd ff38 	bl	8001994 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d902      	bls.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13d      	bne.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4e:	d111      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d004      	beq.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b62:	d107      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d10f      	bne.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e017      	b.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d19b      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000034 	.word	0x20000034

08003bf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c04:	d111      	bne.n	8003c2a <SPI_EndRxTransaction+0x3a>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0e:	d004      	beq.n	8003c1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c18:	d107      	bne.n	8003c2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c32:	d12a      	bne.n	8003c8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d012      	beq.n	8003c64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff ff49 	bl	8003ae0 <SPI_WaitFlagStateUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02d      	beq.n	8003cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e026      	b.n	8003cb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff36 	bl	8003ae0 <SPI_WaitFlagStateUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01a      	beq.n	8003cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e013      	b.n	8003cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2200      	movs	r2, #0
 8003c92:	2101      	movs	r1, #1
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff ff23 	bl	8003ae0 <SPI_WaitFlagStateUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e000      	b.n	8003cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <SPI_EndRxTxTransaction+0x7c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <SPI_EndRxTxTransaction+0x80>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0d5b      	lsrs	r3, r3, #21
 8003cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce6:	d112      	bne.n	8003d0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff fef4 	bl	8003ae0 <SPI_WaitFlagStateUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d0f2      	beq.n	8003d0e <SPI_EndRxTxTransaction+0x52>
 8003d28:	e000      	b.n	8003d2c <SPI_EndRxTxTransaction+0x70>
        break;
 8003d2a:	bf00      	nop
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000034 	.word	0x20000034
 8003d3c:	165e9f81 	.word	0x165e9f81

08003d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd fc92 	bl	8001690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 f9f8 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e041      	b.n	8003e74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f839 	bl	8003e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f000 f9a9 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_TIM_PWM_Start+0x24>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e022      	b.n	8003efa <HAL_TIM_PWM_Start+0x6a>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d109      	bne.n	8003ece <HAL_TIM_PWM_Start+0x3e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e015      	b.n	8003efa <HAL_TIM_PWM_Start+0x6a>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d109      	bne.n	8003ee8 <HAL_TIM_PWM_Start+0x58>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e008      	b.n	8003efa <HAL_TIM_PWM_Start+0x6a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e068      	b.n	8003fd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x82>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	e013      	b.n	8003f3a <HAL_TIM_PWM_Start+0xaa>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_PWM_Start+0x92>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	e00b      	b.n	8003f3a <HAL_TIM_PWM_Start+0xaa>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_PWM_Start+0xa2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f30:	e003      	b.n	8003f3a <HAL_TIM_PWM_Start+0xaa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fb22 	bl	800458c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <HAL_TIM_PWM_Start+0x14c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d107      	bne.n	8003f62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <HAL_TIM_PWM_Start+0x14c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f74:	d013      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <HAL_TIM_PWM_Start+0x150>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <HAL_TIM_PWM_Start+0x154>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <HAL_TIM_PWM_Start+0x158>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <HAL_TIM_PWM_Start+0x15c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d111      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d010      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	e007      	b.n	8003fd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40014000 	.word	0x40014000

08003ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800400a:	2302      	movs	r3, #2
 800400c:	e0ae      	b.n	800416c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b0c      	cmp	r3, #12
 800401a:	f200 809f 	bhi.w	800415c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004059 	.word	0x08004059
 8004028:	0800415d 	.word	0x0800415d
 800402c:	0800415d 	.word	0x0800415d
 8004030:	0800415d 	.word	0x0800415d
 8004034:	08004099 	.word	0x08004099
 8004038:	0800415d 	.word	0x0800415d
 800403c:	0800415d 	.word	0x0800415d
 8004040:	0800415d 	.word	0x0800415d
 8004044:	080040db 	.word	0x080040db
 8004048:	0800415d 	.word	0x0800415d
 800404c:	0800415d 	.word	0x0800415d
 8004050:	0800415d 	.word	0x0800415d
 8004054:	0800411b 	.word	0x0800411b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f908 	bl	8004274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0208 	orr.w	r2, r2, #8
 8004072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0204 	bic.w	r2, r2, #4
 8004082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6999      	ldr	r1, [r3, #24]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	619a      	str	r2, [r3, #24]
      break;
 8004096:	e064      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f94e 	bl	8004340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	619a      	str	r2, [r3, #24]
      break;
 80040d8:	e043      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f999 	bl	8004418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0208 	orr.w	r2, r2, #8
 80040f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0204 	bic.w	r2, r2, #4
 8004104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69d9      	ldr	r1, [r3, #28]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	61da      	str	r2, [r3, #28]
      break;
 8004118:	e023      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f9e3 	bl	80044ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69d9      	ldr	r1, [r3, #28]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	021a      	lsls	r2, r3, #8
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	61da      	str	r2, [r3, #28]
      break;
 800415a:	e002      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]
      break;
 8004160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800416a:	7dfb      	ldrb	r3, [r7, #23]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a34      	ldr	r2, [pc, #208]	; (8004258 <TIM_Base_SetConfig+0xe4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00f      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d00b      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a31      	ldr	r2, [pc, #196]	; (800425c <TIM_Base_SetConfig+0xe8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a30      	ldr	r2, [pc, #192]	; (8004260 <TIM_Base_SetConfig+0xec>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <TIM_Base_SetConfig+0xf0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d108      	bne.n	80041be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <TIM_Base_SetConfig+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <TIM_Base_SetConfig+0xe8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a21      	ldr	r2, [pc, #132]	; (8004260 <TIM_Base_SetConfig+0xec>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a20      	ldr	r2, [pc, #128]	; (8004264 <TIM_Base_SetConfig+0xf0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <TIM_Base_SetConfig+0xf4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1e      	ldr	r2, [pc, #120]	; (800426c <TIM_Base_SetConfig+0xf8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <TIM_Base_SetConfig+0xfc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <TIM_Base_SetConfig+0xe4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d103      	bne.n	8004244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	615a      	str	r2, [r3, #20]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40014000 	.word	0x40014000
 800426c:	40014400 	.word	0x40014400
 8004270:	40014800 	.word	0x40014800

08004274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f023 0201 	bic.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 0302 	bic.w	r3, r3, #2
 80042bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <TIM_OC1_SetConfig+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10c      	bne.n	80042ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0308 	bic.w	r3, r3, #8
 80042d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <TIM_OC1_SetConfig+0xc8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d111      	bne.n	8004316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40010000 	.word	0x40010000

08004340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0210 	bic.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0320 	bic.w	r3, r3, #32
 800438a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <TIM_OC2_SetConfig+0xd4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10d      	bne.n	80043bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <TIM_OC2_SetConfig+0xd4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d113      	bne.n	80043ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40010000 	.word	0x40010000

08004418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <TIM_OC3_SetConfig+0xd0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10d      	bne.n	8004492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800447c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <TIM_OC3_SetConfig+0xd0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d113      	bne.n	80044c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40010000 	.word	0x40010000

080044ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	031b      	lsls	r3, r3, #12
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <TIM_OC4_SetConfig+0x9c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d109      	bne.n	8004560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000

0800458c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2201      	movs	r2, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	401a      	ands	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e03f      	b.n	8004668 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fd f8a3 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2224      	movs	r2, #36	; 0x24
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004618:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fdde 	bl	80051dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800462e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800463e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	d17c      	bne.n	800478a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_UART_Transmit+0x2c>
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e075      	b.n	800478c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Transmit+0x3e>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e06e      	b.n	800478c <HAL_UART_Transmit+0x11c>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2221      	movs	r2, #33	; 0x21
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c4:	f7fd f966 	bl	8001994 <HAL_GetTick>
 80046c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d108      	bne.n	80046f2 <HAL_UART_Transmit+0x82>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e003      	b.n	80046fa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004702:	e02a      	b.n	800475a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fb1e 	bl	8004d50 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e036      	b.n	800478c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004732:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	3302      	adds	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e007      	b.n	800474c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1cf      	bne.n	8004704 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2200      	movs	r2, #0
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 faee 	bl	8004d50 <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e006      	b.n	800478c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e000      	b.n	800478c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800478a:	2302      	movs	r3, #2
  }
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d11d      	bne.n	80047ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_UART_Receive_IT+0x26>
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e016      	b.n	80047ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Receive_IT+0x38>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e00f      	b.n	80047ec <HAL_UART_Receive_IT+0x58>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	461a      	mov	r2, r3
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fb23 	bl	8004e2c <UART_Start_Receive_IT>
 80047e6:	4603      	mov	r3, r0
 80047e8:	e000      	b.n	80047ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0ba      	sub	sp, #232	; 0xe8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_UART_IRQHandler+0x66>
 8004846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fc07 	bl	8005066 <UART_Receive_IT>
      return;
 8004858:	e256      	b.n	8004d08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800485a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80de 	beq.w	8004a20 <HAL_UART_IRQHandler+0x22c>
 8004864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004874:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80d1 	beq.w	8004a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800487e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_UART_IRQHandler+0xae>
 800488a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0201 	orr.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_UART_IRQHandler+0xd2>
 80048ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f043 0202 	orr.w	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_UART_IRQHandler+0xf6>
 80048d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d011      	beq.n	800491a <HAL_UART_IRQHandler+0x126>
 80048f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0208 	orr.w	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 81ed 	beq.w	8004cfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_UART_IRQHandler+0x14e>
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fb92 	bl	8005066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <HAL_UART_IRQHandler+0x17a>
 8004966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04f      	beq.n	8004a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa9a 	bl	8004ea8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d141      	bne.n	8004a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3314      	adds	r3, #20
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800499c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d9      	bne.n	8004982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d013      	beq.n	80049fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	4a7d      	ldr	r2, [pc, #500]	; (8004bd0 <HAL_UART_IRQHandler+0x3dc>)
 80049dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd f987 	bl	8001cf6 <HAL_DMA_Abort_IT>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049f8:	4610      	mov	r0, r2
 80049fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00e      	b.n	8004a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f990 	bl	8004d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e00a      	b.n	8004a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f98c 	bl	8004d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e006      	b.n	8004a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f988 	bl	8004d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a1a:	e170      	b.n	8004cfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	bf00      	nop
    return;
 8004a1e:	e16e      	b.n	8004cfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f040 814a 	bne.w	8004cbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8143 	beq.w	8004cbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 813c 	beq.w	8004cbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	f040 80b4 	bne.w	8004bd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8140 	beq.w	8004d02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f080 8139 	bcs.w	8004d02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa2:	f000 8088 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1d9      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e1      	bne.n	8004af2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b86:	f023 0310 	bic.w	r3, r3, #16
 8004b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e3      	bne.n	8004b74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fd f830 	bl	8001c16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8b6 	bl	8004d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bcc:	e099      	b.n	8004d02 <HAL_UART_IRQHandler+0x50e>
 8004bce:	bf00      	nop
 8004bd0:	08004f6f 	.word	0x08004f6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 808b 	beq.w	8004d06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8086 	beq.w	8004d06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c1e:	647a      	str	r2, [r7, #68]	; 0x44
 8004c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e3      	bne.n	8004bfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	623b      	str	r3, [r7, #32]
   return(result);
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c56:	633a      	str	r2, [r7, #48]	; 0x30
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e3      	bne.n	8004c32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0310 	bic.w	r3, r3, #16
 8004c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e3      	bne.n	8004c78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f83e 	bl	8004d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cbc:	e023      	b.n	8004d06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_UART_IRQHandler+0x4ea>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f95d 	bl	8004f96 <UART_Transmit_IT>
    return;
 8004cdc:	e014      	b.n	8004d08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00e      	beq.n	8004d08 <HAL_UART_IRQHandler+0x514>
 8004cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f99d 	bl	8005036 <UART_EndTransmit_IT>
    return;
 8004cfc:	e004      	b.n	8004d08 <HAL_UART_IRQHandler+0x514>
    return;
 8004cfe:	bf00      	nop
 8004d00:	e002      	b.n	8004d08 <HAL_UART_IRQHandler+0x514>
      return;
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <HAL_UART_IRQHandler+0x514>
      return;
 8004d06:	bf00      	nop
  }
}
 8004d08:	37e8      	adds	r7, #232	; 0xe8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b090      	sub	sp, #64	; 0x40
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d60:	e050      	b.n	8004e04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d04c      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d70:	f7fc fe10 	bl	8001994 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d241      	bcs.n	8004e04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004da0:	637a      	str	r2, [r7, #52]	; 0x34
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd4:	623a      	str	r2, [r7, #32]
 8004dd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	69f9      	ldr	r1, [r7, #28]
 8004dda:	6a3a      	ldr	r2, [r7, #32]
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e00f      	b.n	8004e24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d09f      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3740      	adds	r7, #64	; 0x40
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	88fa      	ldrh	r2, [r7, #6]
 8004e4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2222      	movs	r2, #34	; 0x22
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0220 	orr.w	r2, r2, #32
 8004e98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b095      	sub	sp, #84	; 0x54
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ed0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3314      	adds	r3, #20
 8004eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e5      	bne.n	8004ee4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d119      	bne.n	8004f54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f40:	61ba      	str	r2, [r7, #24]
 8004f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6979      	ldr	r1, [r7, #20]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e5      	bne.n	8004f20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f62:	bf00      	nop
 8004f64:	3754      	adds	r7, #84	; 0x54
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7ff fecb 	bl	8004d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b21      	cmp	r3, #33	; 0x21
 8004fa8:	d13e      	bne.n	8005028 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb2:	d114      	bne.n	8004fde <UART_Transmit_IT+0x48>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d110      	bne.n	8004fde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	1c9a      	adds	r2, r3, #2
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]
 8004fdc:	e008      	b.n	8004ff0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	1c59      	adds	r1, r3, #1
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6211      	str	r1, [r2, #32]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10f      	bne.n	8005024 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005012:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005022:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	e000      	b.n	800502a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
  }
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff fe5a 	bl	8004d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b08c      	sub	sp, #48	; 0x30
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b22      	cmp	r3, #34	; 0x22
 8005078:	f040 80ab 	bne.w	80051d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005084:	d117      	bne.n	80050b6 <UART_Receive_IT+0x50>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d113      	bne.n	80050b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
 80050b4:	e026      	b.n	8005104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d007      	beq.n	80050da <UART_Receive_IT+0x74>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <UART_Receive_IT+0x82>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e008      	b.n	80050fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005114:	2b00      	cmp	r3, #0
 8005116:	d15a      	bne.n	80051ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0220 	bic.w	r2, r2, #32
 8005126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	2b01      	cmp	r3, #1
 8005156:	d135      	bne.n	80051c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	613b      	str	r3, [r7, #16]
   return(result);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f023 0310 	bic.w	r3, r3, #16
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	330c      	adds	r3, #12
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	623a      	str	r2, [r7, #32]
 8005180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	69f9      	ldr	r1, [r7, #28]
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	61bb      	str	r3, [r7, #24]
   return(result);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e5      	bne.n	800515e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b10      	cmp	r3, #16
 800519e:	d10a      	bne.n	80051b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fdbb 	bl	8004d38 <HAL_UARTEx_RxEventCallback>
 80051c2:	e002      	b.n	80051ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fb fd83 	bl	8000cd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e002      	b.n	80051d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3730      	adds	r7, #48	; 0x30
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e0:	b0c0      	sub	sp, #256	; 0x100
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	68d9      	ldr	r1, [r3, #12]
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	ea40 0301 	orr.w	r3, r0, r1
 8005204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	431a      	orrs	r2, r3
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	431a      	orrs	r2, r3
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005234:	f021 010c 	bic.w	r1, r1, #12
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005242:	430b      	orrs	r3, r1
 8005244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	6999      	ldr	r1, [r3, #24]
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	ea40 0301 	orr.w	r3, r0, r1
 8005262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b8f      	ldr	r3, [pc, #572]	; (80054a8 <UART_SetConfig+0x2cc>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d005      	beq.n	800527c <UART_SetConfig+0xa0>
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b8d      	ldr	r3, [pc, #564]	; (80054ac <UART_SetConfig+0x2d0>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d104      	bne.n	8005286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7fd ffa4 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 8005280:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005284:	e003      	b.n	800528e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005286:	f7fd ff8b 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 800528a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	f040 810c 	bne.w	80054b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800529c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80052b6:	415b      	adcs	r3, r3
 80052b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052be:	4621      	mov	r1, r4
 80052c0:	eb12 0801 	adds.w	r8, r2, r1
 80052c4:	4629      	mov	r1, r5
 80052c6:	eb43 0901 	adc.w	r9, r3, r1
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052de:	4690      	mov	r8, r2
 80052e0:	4699      	mov	r9, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	eb18 0303 	adds.w	r3, r8, r3
 80052e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052ec:	462b      	mov	r3, r5
 80052ee:	eb49 0303 	adc.w	r3, r9, r3
 80052f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005302:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800530a:	460b      	mov	r3, r1
 800530c:	18db      	adds	r3, r3, r3
 800530e:	653b      	str	r3, [r7, #80]	; 0x50
 8005310:	4613      	mov	r3, r2
 8005312:	eb42 0303 	adc.w	r3, r2, r3
 8005316:	657b      	str	r3, [r7, #84]	; 0x54
 8005318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800531c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005320:	f7fa ff64 	bl	80001ec <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4b61      	ldr	r3, [pc, #388]	; (80054b0 <UART_SetConfig+0x2d4>)
 800532a:	fba3 2302 	umull	r2, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	011c      	lsls	r4, r3, #4
 8005332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005336:	2200      	movs	r2, #0
 8005338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800533c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	1891      	adds	r1, r2, r2
 800534a:	64b9      	str	r1, [r7, #72]	; 0x48
 800534c:	415b      	adcs	r3, r3
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005354:	4641      	mov	r1, r8
 8005356:	eb12 0a01 	adds.w	sl, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb43 0b01 	adc.w	fp, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800536c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005374:	4692      	mov	sl, r2
 8005376:	469b      	mov	fp, r3
 8005378:	4643      	mov	r3, r8
 800537a:	eb1a 0303 	adds.w	r3, sl, r3
 800537e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005382:	464b      	mov	r3, r9
 8005384:	eb4b 0303 	adc.w	r3, fp, r3
 8005388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005398:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800539c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053a0:	460b      	mov	r3, r1
 80053a2:	18db      	adds	r3, r3, r3
 80053a4:	643b      	str	r3, [r7, #64]	; 0x40
 80053a6:	4613      	mov	r3, r2
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
 80053ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053b6:	f7fa ff19 	bl	80001ec <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <UART_SetConfig+0x2d4>)
 80053c2:	fba3 2301 	umull	r2, r3, r3, r1
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2264      	movs	r2, #100	; 0x64
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	1acb      	subs	r3, r1, r3
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053d6:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <UART_SetConfig+0x2d4>)
 80053d8:	fba3 2302 	umull	r2, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053e4:	441c      	add	r4, r3
 80053e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	1891      	adds	r1, r2, r2
 80053fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005400:	415b      	adcs	r3, r3
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005408:	4641      	mov	r1, r8
 800540a:	1851      	adds	r1, r2, r1
 800540c:	6339      	str	r1, [r7, #48]	; 0x30
 800540e:	4649      	mov	r1, r9
 8005410:	414b      	adcs	r3, r1
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005420:	4659      	mov	r1, fp
 8005422:	00cb      	lsls	r3, r1, #3
 8005424:	4651      	mov	r1, sl
 8005426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800542a:	4651      	mov	r1, sl
 800542c:	00ca      	lsls	r2, r1, #3
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	4603      	mov	r3, r0
 8005434:	4642      	mov	r2, r8
 8005436:	189b      	adds	r3, r3, r2
 8005438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800543c:	464b      	mov	r3, r9
 800543e:	460a      	mov	r2, r1
 8005440:	eb42 0303 	adc.w	r3, r2, r3
 8005444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005454:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800545c:	460b      	mov	r3, r1
 800545e:	18db      	adds	r3, r3, r3
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
 8005462:	4613      	mov	r3, r2
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800546a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800546e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005472:	f7fa febb 	bl	80001ec <__aeabi_uldivmod>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <UART_SetConfig+0x2d4>)
 800547c:	fba3 1302 	umull	r1, r3, r3, r2
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	2164      	movs	r1, #100	; 0x64
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	3332      	adds	r3, #50	; 0x32
 800548e:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <UART_SetConfig+0x2d4>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f003 0207 	and.w	r2, r3, #7
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4422      	add	r2, r4
 80054a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054a4:	e106      	b.n	80056b4 <UART_SetConfig+0x4d8>
 80054a6:	bf00      	nop
 80054a8:	40011000 	.word	0x40011000
 80054ac:	40011400 	.word	0x40011400
 80054b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	1891      	adds	r1, r2, r2
 80054cc:	6239      	str	r1, [r7, #32]
 80054ce:	415b      	adcs	r3, r3
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
 80054d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054d6:	4641      	mov	r1, r8
 80054d8:	1854      	adds	r4, r2, r1
 80054da:	4649      	mov	r1, r9
 80054dc:	eb43 0501 	adc.w	r5, r3, r1
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	00eb      	lsls	r3, r5, #3
 80054ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ee:	00e2      	lsls	r2, r4, #3
 80054f0:	4614      	mov	r4, r2
 80054f2:	461d      	mov	r5, r3
 80054f4:	4643      	mov	r3, r8
 80054f6:	18e3      	adds	r3, r4, r3
 80054f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054fc:	464b      	mov	r3, r9
 80054fe:	eb45 0303 	adc.w	r3, r5, r3
 8005502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005522:	4629      	mov	r1, r5
 8005524:	008b      	lsls	r3, r1, #2
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552c:	4621      	mov	r1, r4
 800552e:	008a      	lsls	r2, r1, #2
 8005530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005534:	f7fa fe5a 	bl	80001ec <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4b60      	ldr	r3, [pc, #384]	; (80056c0 <UART_SetConfig+0x4e4>)
 800553e:	fba3 2302 	umull	r2, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	011c      	lsls	r4, r3, #4
 8005546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	1891      	adds	r1, r2, r2
 800555e:	61b9      	str	r1, [r7, #24]
 8005560:	415b      	adcs	r3, r3
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005568:	4641      	mov	r1, r8
 800556a:	1851      	adds	r1, r2, r1
 800556c:	6139      	str	r1, [r7, #16]
 800556e:	4649      	mov	r1, r9
 8005570:	414b      	adcs	r3, r1
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005580:	4659      	mov	r1, fp
 8005582:	00cb      	lsls	r3, r1, #3
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558a:	4651      	mov	r1, sl
 800558c:	00ca      	lsls	r2, r1, #3
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	4603      	mov	r3, r0
 8005594:	4642      	mov	r2, r8
 8005596:	189b      	adds	r3, r3, r2
 8005598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800559c:	464b      	mov	r3, r9
 800559e:	460a      	mov	r2, r1
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055c0:	4649      	mov	r1, r9
 80055c2:	008b      	lsls	r3, r1, #2
 80055c4:	4641      	mov	r1, r8
 80055c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ca:	4641      	mov	r1, r8
 80055cc:	008a      	lsls	r2, r1, #2
 80055ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055d2:	f7fa fe0b 	bl	80001ec <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <UART_SetConfig+0x4e4>)
 80055de:	fba3 2301 	umull	r2, r3, r3, r1
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2264      	movs	r2, #100	; 0x64
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	1acb      	subs	r3, r1, r3
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	3332      	adds	r3, #50	; 0x32
 80055f0:	4a33      	ldr	r2, [pc, #204]	; (80056c0 <UART_SetConfig+0x4e4>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055fc:	441c      	add	r4, r3
 80055fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005602:	2200      	movs	r2, #0
 8005604:	673b      	str	r3, [r7, #112]	; 0x70
 8005606:	677a      	str	r2, [r7, #116]	; 0x74
 8005608:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800560c:	4642      	mov	r2, r8
 800560e:	464b      	mov	r3, r9
 8005610:	1891      	adds	r1, r2, r2
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	415b      	adcs	r3, r3
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800561c:	4641      	mov	r1, r8
 800561e:	1851      	adds	r1, r2, r1
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	4649      	mov	r1, r9
 8005624:	414b      	adcs	r3, r1
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005634:	4659      	mov	r1, fp
 8005636:	00cb      	lsls	r3, r1, #3
 8005638:	4651      	mov	r1, sl
 800563a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800563e:	4651      	mov	r1, sl
 8005640:	00ca      	lsls	r2, r1, #3
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	4603      	mov	r3, r0
 8005648:	4642      	mov	r2, r8
 800564a:	189b      	adds	r3, r3, r2
 800564c:	66bb      	str	r3, [r7, #104]	; 0x68
 800564e:	464b      	mov	r3, r9
 8005650:	460a      	mov	r2, r1
 8005652:	eb42 0303 	adc.w	r3, r2, r3
 8005656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	663b      	str	r3, [r7, #96]	; 0x60
 8005662:	667a      	str	r2, [r7, #100]	; 0x64
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005670:	4649      	mov	r1, r9
 8005672:	008b      	lsls	r3, r1, #2
 8005674:	4641      	mov	r1, r8
 8005676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800567a:	4641      	mov	r1, r8
 800567c:	008a      	lsls	r2, r1, #2
 800567e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005682:	f7fa fdb3 	bl	80001ec <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <UART_SetConfig+0x4e4>)
 800568c:	fba3 1302 	umull	r1, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	2164      	movs	r1, #100	; 0x64
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	3332      	adds	r3, #50	; 0x32
 800569e:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <UART_SetConfig+0x4e4>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4422      	add	r2, r4
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056ba:	46bd      	mov	sp, r7
 80056bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c0:	51eb851f 	.word	0x51eb851f

080056c4 <memset>:
 80056c4:	4402      	add	r2, r0
 80056c6:	4603      	mov	r3, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <memset+0xa>
 80056cc:	4770      	bx	lr
 80056ce:	f803 1b01 	strb.w	r1, [r3], #1
 80056d2:	e7f9      	b.n	80056c8 <memset+0x4>

080056d4 <__libc_init_array>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	4d0d      	ldr	r5, [pc, #52]	; (800570c <__libc_init_array+0x38>)
 80056d8:	4c0d      	ldr	r4, [pc, #52]	; (8005710 <__libc_init_array+0x3c>)
 80056da:	1b64      	subs	r4, r4, r5
 80056dc:	10a4      	asrs	r4, r4, #2
 80056de:	2600      	movs	r6, #0
 80056e0:	42a6      	cmp	r6, r4
 80056e2:	d109      	bne.n	80056f8 <__libc_init_array+0x24>
 80056e4:	4d0b      	ldr	r5, [pc, #44]	; (8005714 <__libc_init_array+0x40>)
 80056e6:	4c0c      	ldr	r4, [pc, #48]	; (8005718 <__libc_init_array+0x44>)
 80056e8:	f000 f818 	bl	800571c <_init>
 80056ec:	1b64      	subs	r4, r4, r5
 80056ee:	10a4      	asrs	r4, r4, #2
 80056f0:	2600      	movs	r6, #0
 80056f2:	42a6      	cmp	r6, r4
 80056f4:	d105      	bne.n	8005702 <__libc_init_array+0x2e>
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fc:	4798      	blx	r3
 80056fe:	3601      	adds	r6, #1
 8005700:	e7ee      	b.n	80056e0 <__libc_init_array+0xc>
 8005702:	f855 3b04 	ldr.w	r3, [r5], #4
 8005706:	4798      	blx	r3
 8005708:	3601      	adds	r6, #1
 800570a:	e7f2      	b.n	80056f2 <__libc_init_array+0x1e>
 800570c:	0800581c 	.word	0x0800581c
 8005710:	0800581c 	.word	0x0800581c
 8005714:	0800581c 	.word	0x0800581c
 8005718:	08005820 	.word	0x08005820

0800571c <_init>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr

08005728 <_fini>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	bf00      	nop
 800572c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572e:	bc08      	pop	{r3}
 8005730:	469e      	mov	lr, r3
 8005732:	4770      	bx	lr
